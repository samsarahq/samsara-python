# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.hub_capacities_list_hub_capacities_response_body import HubCapacitiesListHubCapacitiesResponseBody
from ..types.hub_location_input_object_request_body import HubLocationInputObjectRequestBody
from ..types.hub_locations_create_hub_locations_response_body import HubLocationsCreateHubLocationsResponseBody
from ..types.hub_locations_list_hub_locations_response_body import HubLocationsListHubLocationsResponseBody
from ..types.hub_locations_update_hub_location_response_body import HubLocationsUpdateHubLocationResponseBody
from ..types.hub_skills_list_hub_skills_response_body import HubSkillsListHubSkillsResponseBody
from ..types.hubs_list_hubs_response_body import HubsListHubsResponseBody
from ..types.update_hub_location_request_body_request_body import UpdateHubLocationRequestBodyRequestBody
from .raw_client import AsyncRawHubsClient, RawHubsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class HubsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawHubsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawHubsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawHubsClient
        """
        return self._raw_client

    def list_hub_capacities(
        self,
        *,
        hub_id: str,
        capacity_ids: typing.Optional[str] = None,
        capacity_names: typing.Optional[str] = None,
        start_time: typing.Optional[dt.datetime] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubCapacitiesListHubCapacitiesResponseBody:
        """
        Retrieve capacity types for a specific hub.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        hub_id : str
            The hub identifier

        capacity_ids : typing.Optional[str]
            Comma-separated list of capacity IDs for filtering.

        capacity_names : typing.Optional[str]
            Comma-separated list of capacity names for filtering.

        start_time : typing.Optional[dt.datetime]
            Time filter of when the capacity was updated, in RFC 3339 format

        end_time : typing.Optional[dt.datetime]
            Time filter of when the capacity was updated, in RFC 3339 format

        after : typing.Optional[str]
            If specified, should be the endCursor from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            Maximum number of objects to return. Default and maximum is 100

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubCapacitiesListHubCapacitiesResponseBody
            OK response.

        Examples
        --------
        import datetime

        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.hubs.list_hub_capacities(
            hub_id="hubId",
            capacity_ids="capacityIds",
            capacity_names="capacityNames",
            start_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            end_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            after="after",
            limit=1,
        )
        """
        _response = self._raw_client.list_hub_capacities(
            hub_id=hub_id,
            capacity_ids=capacity_ids,
            capacity_names=capacity_names,
            start_time=start_time,
            end_time=end_time,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def update_hub_location(
        self,
        id: str,
        *,
        data: UpdateHubLocationRequestBodyRequestBody,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubLocationsUpdateHubLocationResponseBody:
        """
        Update existing location by ID.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unique Samsara ID of the hub location to update

        data : UpdateHubLocationRequestBodyRequestBody

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubLocationsUpdateHubLocationResponseBody
            OK response.

        Examples
        --------
        from samsara import (
            HubLocationServiceWindowInputRequestBody,
            Samsara,
            UpdateHubLocationRequestBodyRequestBody,
        )

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.hubs.update_hub_location(
            id="id",
            data=UpdateHubLocationRequestBodyRequestBody(
                address="123 Industrial Blvd, Los Angeles, CA 90210, US",
                customer_location_id="LOC-123",
                driver_instructions="sample instructions",
                is_depot=False,
                latitude=34.0522,
                longitude=-118.2437,
                name="Customer ABC Warehouse",
                planner_notes="sample note",
                service_time_seconds=1800,
                service_windows=[
                    HubLocationServiceWindowInputRequestBody(
                        days_of_week=[
                            "monday",
                            "tuesday",
                            "wednesday",
                            "thursday",
                            "friday",
                        ],
                        end_time="17:00:00",
                        start_time="08:00:00",
                    )
                ],
                skills_required=["650e8400-e29b-41d4-a716-446655440001"],
            ),
        )
        """
        _response = self._raw_client.update_hub_location(id, data=data, request_options=request_options)
        return _response.data

    def list_hub_locations(
        self,
        *,
        hub_id: str,
        location_ids: typing.Optional[str] = None,
        customer_location_ids: typing.Optional[str] = None,
        start_time: typing.Optional[dt.datetime] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubLocationsListHubLocationsResponseBody:
        """
        Retrieve locations for a specific hub.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        hub_id : str
            The hub identifier

        location_ids : typing.Optional[str]
            A comma-separated list of location IDs that can be used for filtering

        customer_location_ids : typing.Optional[str]
            A comma-separated list of customer provided location IDs that can be used for filtering

        start_time : typing.Optional[dt.datetime]
            Time filter of when the location was updated, in RFC 3339 format

        end_time : typing.Optional[dt.datetime]
            Time filter of when the location was updated, in RFC 3339 format

        after : typing.Optional[str]
            If specified, should be the endCursor from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            Maximum number of objects to return. Default and maximum is 100

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubLocationsListHubLocationsResponseBody
            OK response.

        Examples
        --------
        import datetime

        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.hubs.list_hub_locations(
            hub_id="hubId",
            location_ids="locationIds",
            customer_location_ids="customerLocationIds",
            start_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            end_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            after="after",
            limit=1,
        )
        """
        _response = self._raw_client.list_hub_locations(
            hub_id=hub_id,
            location_ids=location_ids,
            customer_location_ids=customer_location_ids,
            start_time=start_time,
            end_time=end_time,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def create_hub_locations(
        self,
        *,
        data: typing.Sequence[HubLocationInputObjectRequestBody],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubLocationsCreateHubLocationsResponseBody:
        """
        Create new locations.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        data : typing.Sequence[HubLocationInputObjectRequestBody]
            An array of location objects to be created or updated

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubLocationsCreateHubLocationsResponseBody
            OK response.

        Examples
        --------
        from samsara import (
            HubLocationInputObjectRequestBody,
            HubLocationServiceWindowInputRequestBody,
            Samsara,
        )

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.hubs.create_hub_locations(
            data=[
                HubLocationInputObjectRequestBody(
                    address="123 Industrial Blvd, Los Angeles, CA 90210, US",
                    customer_location_id="LOC-123",
                    driver_instructions="sample instructions",
                    hub_id="550e8400-e29b-41d4-a716-446655440000",
                    is_depot=False,
                    latitude=34.0522,
                    longitude=-118.2437,
                    name="Customer ABC Warehouse",
                    planner_notes="sample note",
                    service_time_seconds=1800,
                    service_windows=[
                        HubLocationServiceWindowInputRequestBody(
                            days_of_week=[
                                "monday",
                                "tuesday",
                                "wednesday",
                                "thursday",
                                "friday",
                            ],
                            end_time="17:00:00",
                            start_time="08:00:00",
                        )
                    ],
                    skills_required=["650e8400-e29b-41d4-a716-446655440001"],
                )
            ],
        )
        """
        _response = self._raw_client.create_hub_locations(data=data, request_options=request_options)
        return _response.data

    def list_hub_skills(
        self,
        *,
        hub_id: str,
        skill_ids: typing.Optional[str] = None,
        skill_names: typing.Optional[str] = None,
        start_time: typing.Optional[dt.datetime] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubSkillsListHubSkillsResponseBody:
        """
        Retrieve skills for a specific hub.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        hub_id : str
            The hub identifier

        skill_ids : typing.Optional[str]
            A comma-separated list of skill IDs that can be used for filtering.

        skill_names : typing.Optional[str]
            A comma-separated list of skill namess that can be used for filtering.

        start_time : typing.Optional[dt.datetime]
            Time filter of when the skill was updated, in RFC 3339 format

        end_time : typing.Optional[dt.datetime]
            Time filter of when the skill was updated, in RFC 3339 format

        after : typing.Optional[str]
            If specified, should be the endCursor from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            Maximum number of objects to return. Default and maximum is 100

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubSkillsListHubSkillsResponseBody
            OK response.

        Examples
        --------
        import datetime

        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.hubs.list_hub_skills(
            hub_id="hubId",
            skill_ids="skillIds",
            skill_names="skillNames",
            start_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            end_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            after="after",
            limit=1,
        )
        """
        _response = self._raw_client.list_hub_skills(
            hub_id=hub_id,
            skill_ids=skill_ids,
            skill_names=skill_names,
            start_time=start_time,
            end_time=end_time,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def list_hubs(
        self,
        *,
        hub_ids: typing.Optional[str] = None,
        start_time: typing.Optional[dt.datetime] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubsListHubsResponseBody:
        """
        Retrieve all hubs (planners) in the organization. This endpoint supports pagination and filtering based on hub IDs and update times.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        hub_ids : typing.Optional[str]
            A comma-separated list of hub IDs for filtering results.

        start_time : typing.Optional[dt.datetime]
            Returns hubs updated after the specified time in UTC

        end_time : typing.Optional[dt.datetime]
            Returns hubs updated before the specified time in UTC

        after : typing.Optional[str]
            If specified, should be the endCursor from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            Maximum number of objects to return. Default and maximum is 100

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubsListHubsResponseBody
            OK response.

        Examples
        --------
        import datetime

        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.hubs.list_hubs(
            hub_ids="hubIds",
            start_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            end_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            after="after",
            limit=1,
        )
        """
        _response = self._raw_client.list_hubs(
            hub_ids=hub_ids,
            start_time=start_time,
            end_time=end_time,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data


class AsyncHubsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawHubsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawHubsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawHubsClient
        """
        return self._raw_client

    async def list_hub_capacities(
        self,
        *,
        hub_id: str,
        capacity_ids: typing.Optional[str] = None,
        capacity_names: typing.Optional[str] = None,
        start_time: typing.Optional[dt.datetime] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubCapacitiesListHubCapacitiesResponseBody:
        """
        Retrieve capacity types for a specific hub.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        hub_id : str
            The hub identifier

        capacity_ids : typing.Optional[str]
            Comma-separated list of capacity IDs for filtering.

        capacity_names : typing.Optional[str]
            Comma-separated list of capacity names for filtering.

        start_time : typing.Optional[dt.datetime]
            Time filter of when the capacity was updated, in RFC 3339 format

        end_time : typing.Optional[dt.datetime]
            Time filter of when the capacity was updated, in RFC 3339 format

        after : typing.Optional[str]
            If specified, should be the endCursor from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            Maximum number of objects to return. Default and maximum is 100

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubCapacitiesListHubCapacitiesResponseBody
            OK response.

        Examples
        --------
        import asyncio
        import datetime

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.hubs.list_hub_capacities(
                hub_id="hubId",
                capacity_ids="capacityIds",
                capacity_names="capacityNames",
                start_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                end_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                after="after",
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_hub_capacities(
            hub_id=hub_id,
            capacity_ids=capacity_ids,
            capacity_names=capacity_names,
            start_time=start_time,
            end_time=end_time,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def update_hub_location(
        self,
        id: str,
        *,
        data: UpdateHubLocationRequestBodyRequestBody,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubLocationsUpdateHubLocationResponseBody:
        """
        Update existing location by ID.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unique Samsara ID of the hub location to update

        data : UpdateHubLocationRequestBodyRequestBody

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubLocationsUpdateHubLocationResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import (
            AsyncSamsara,
            HubLocationServiceWindowInputRequestBody,
            UpdateHubLocationRequestBodyRequestBody,
        )

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.hubs.update_hub_location(
                id="id",
                data=UpdateHubLocationRequestBodyRequestBody(
                    address="123 Industrial Blvd, Los Angeles, CA 90210, US",
                    customer_location_id="LOC-123",
                    driver_instructions="sample instructions",
                    is_depot=False,
                    latitude=34.0522,
                    longitude=-118.2437,
                    name="Customer ABC Warehouse",
                    planner_notes="sample note",
                    service_time_seconds=1800,
                    service_windows=[
                        HubLocationServiceWindowInputRequestBody(
                            days_of_week=[
                                "monday",
                                "tuesday",
                                "wednesday",
                                "thursday",
                                "friday",
                            ],
                            end_time="17:00:00",
                            start_time="08:00:00",
                        )
                    ],
                    skills_required=["650e8400-e29b-41d4-a716-446655440001"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_hub_location(id, data=data, request_options=request_options)
        return _response.data

    async def list_hub_locations(
        self,
        *,
        hub_id: str,
        location_ids: typing.Optional[str] = None,
        customer_location_ids: typing.Optional[str] = None,
        start_time: typing.Optional[dt.datetime] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubLocationsListHubLocationsResponseBody:
        """
        Retrieve locations for a specific hub.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        hub_id : str
            The hub identifier

        location_ids : typing.Optional[str]
            A comma-separated list of location IDs that can be used for filtering

        customer_location_ids : typing.Optional[str]
            A comma-separated list of customer provided location IDs that can be used for filtering

        start_time : typing.Optional[dt.datetime]
            Time filter of when the location was updated, in RFC 3339 format

        end_time : typing.Optional[dt.datetime]
            Time filter of when the location was updated, in RFC 3339 format

        after : typing.Optional[str]
            If specified, should be the endCursor from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            Maximum number of objects to return. Default and maximum is 100

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubLocationsListHubLocationsResponseBody
            OK response.

        Examples
        --------
        import asyncio
        import datetime

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.hubs.list_hub_locations(
                hub_id="hubId",
                location_ids="locationIds",
                customer_location_ids="customerLocationIds",
                start_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                end_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                after="after",
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_hub_locations(
            hub_id=hub_id,
            location_ids=location_ids,
            customer_location_ids=customer_location_ids,
            start_time=start_time,
            end_time=end_time,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def create_hub_locations(
        self,
        *,
        data: typing.Sequence[HubLocationInputObjectRequestBody],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubLocationsCreateHubLocationsResponseBody:
        """
        Create new locations.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        data : typing.Sequence[HubLocationInputObjectRequestBody]
            An array of location objects to be created or updated

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubLocationsCreateHubLocationsResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import (
            AsyncSamsara,
            HubLocationInputObjectRequestBody,
            HubLocationServiceWindowInputRequestBody,
        )

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.hubs.create_hub_locations(
                data=[
                    HubLocationInputObjectRequestBody(
                        address="123 Industrial Blvd, Los Angeles, CA 90210, US",
                        customer_location_id="LOC-123",
                        driver_instructions="sample instructions",
                        hub_id="550e8400-e29b-41d4-a716-446655440000",
                        is_depot=False,
                        latitude=34.0522,
                        longitude=-118.2437,
                        name="Customer ABC Warehouse",
                        planner_notes="sample note",
                        service_time_seconds=1800,
                        service_windows=[
                            HubLocationServiceWindowInputRequestBody(
                                days_of_week=[
                                    "monday",
                                    "tuesday",
                                    "wednesday",
                                    "thursday",
                                    "friday",
                                ],
                                end_time="17:00:00",
                                start_time="08:00:00",
                            )
                        ],
                        skills_required=["650e8400-e29b-41d4-a716-446655440001"],
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_hub_locations(data=data, request_options=request_options)
        return _response.data

    async def list_hub_skills(
        self,
        *,
        hub_id: str,
        skill_ids: typing.Optional[str] = None,
        skill_names: typing.Optional[str] = None,
        start_time: typing.Optional[dt.datetime] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubSkillsListHubSkillsResponseBody:
        """
        Retrieve skills for a specific hub.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        hub_id : str
            The hub identifier

        skill_ids : typing.Optional[str]
            A comma-separated list of skill IDs that can be used for filtering.

        skill_names : typing.Optional[str]
            A comma-separated list of skill namess that can be used for filtering.

        start_time : typing.Optional[dt.datetime]
            Time filter of when the skill was updated, in RFC 3339 format

        end_time : typing.Optional[dt.datetime]
            Time filter of when the skill was updated, in RFC 3339 format

        after : typing.Optional[str]
            If specified, should be the endCursor from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            Maximum number of objects to return. Default and maximum is 100

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubSkillsListHubSkillsResponseBody
            OK response.

        Examples
        --------
        import asyncio
        import datetime

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.hubs.list_hub_skills(
                hub_id="hubId",
                skill_ids="skillIds",
                skill_names="skillNames",
                start_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                end_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                after="after",
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_hub_skills(
            hub_id=hub_id,
            skill_ids=skill_ids,
            skill_names=skill_names,
            start_time=start_time,
            end_time=end_time,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def list_hubs(
        self,
        *,
        hub_ids: typing.Optional[str] = None,
        start_time: typing.Optional[dt.datetime] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HubsListHubsResponseBody:
        """
        Retrieve all hubs (planners) in the organization. This endpoint supports pagination and filtering based on hub IDs and update times.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        hub_ids : typing.Optional[str]
            A comma-separated list of hub IDs for filtering results.

        start_time : typing.Optional[dt.datetime]
            Returns hubs updated after the specified time in UTC

        end_time : typing.Optional[dt.datetime]
            Returns hubs updated before the specified time in UTC

        after : typing.Optional[str]
            If specified, should be the endCursor from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            Maximum number of objects to return. Default and maximum is 100

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HubsListHubsResponseBody
            OK response.

        Examples
        --------
        import asyncio
        import datetime

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.hubs.list_hubs(
                hub_ids="hubIds",
                start_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                end_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                after="after",
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_hubs(
            hub_ids=hub_ids,
            start_time=start_time,
            end_time=end_time,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data
