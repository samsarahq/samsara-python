# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .forms_condition_object_response_body_type import FormsConditionObjectResponseBodyType


class FormsConditionObjectResponseBody(UniversalBaseModel):
    """
    Forms condition object.
    """

    selected_option_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="selectedOptionIds")
    ] = pydantic.Field(default=None)
    """
    List of option IDs that will satisfy the condition if selected. For check boxes fields, the condition will be met if any of these option IDs are selected. Only returned for multiple choice or check boxes fields when the condition type is `multipleChoiceValueCondition` or `checkBoxesValueCondition`.
    """

    type: FormsConditionObjectResponseBodyType = pydantic.Field()
    """
    Type of condition that must be met for actions to be taken.  Valid values: `multipleChoiceValueCondition`, `checkBoxesValueCondition`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
