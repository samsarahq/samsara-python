# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class EquipmentHeaderWithAdditionalFieldsResponseBody(UniversalBaseModel):
    """
    Equipment header fields.
    """

    equipment_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="EquipmentID")] = (
        pydantic.Field(default=None)
    )
    """
    The unique Samsara ID of the equipment. This is automatically generated when the Equipment object is created. It cannot be changed.
    """

    model: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Model")] = pydantic.Field(
        default=None
    )
    """
    The model of the equipment.
    """

    oem_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="OEMName")] = pydantic.Field(
        default=None
    )
    """
    The make of the equipment.
    """

    pin: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="PIN")] = pydantic.Field(default=None)
    """
    The PIN number of the equipment.
    """

    serial_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="SerialNumber")] = (
        pydantic.Field(default=None)
    )
    """
    The serial number of the equipment.
    """

    unit_install_date_time: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="UnitInstallDateTime")
    ] = pydantic.Field(default=None)
    """
    Telematics unit install date in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
