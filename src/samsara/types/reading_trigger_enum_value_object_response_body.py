# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class ReadingTriggerEnumValueObjectResponseBody(UniversalBaseModel):
    """
    Enum value to alert on if reading is discrete, either enum or continuous threshold may be set.
    """

    number: typing.Optional[int] = pydantic.Field(default=None)
    """
    The numeric representation of the enum value.
    """

    symbol: typing.Optional[str] = pydantic.Field(default=None)
    """
    The symbol representation of the enum value.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
