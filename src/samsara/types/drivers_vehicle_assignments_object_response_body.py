# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .drivers_vehicle_assignments_object_response_body_driver_activation_status import (
    DriversVehicleAssignmentsObjectResponseBodyDriverActivationStatus,
)
from .vehicle_assignment_object_response_body import VehicleAssignmentObjectResponseBody


class DriversVehicleAssignmentsObjectResponseBody(UniversalBaseModel):
    driver_activation_status: typing_extensions.Annotated[
        DriversVehicleAssignmentsObjectResponseBodyDriverActivationStatus, FieldMetadata(alias="driverActivationStatus")
    ] = pydantic.Field()
    """
    A value indicating whether the driver is active or deactivated.  Valid values: `active`, `deactivated`
    """

    external_ids: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, str]], FieldMetadata(alias="externalIds")
    ] = pydantic.Field(default=None)
    """
    A map of external ids
    """

    id: str = pydantic.Field()
    """
    ID of the driver.
    """

    name: str = pydantic.Field()
    """
    Name of the driver.
    """

    vehicle_assignments: typing_extensions.Annotated[
        typing.List[VehicleAssignmentObjectResponseBody], FieldMetadata(alias="vehicleAssignments")
    ] = pydantic.Field()
    """
    List of vehicle assignment objects.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
