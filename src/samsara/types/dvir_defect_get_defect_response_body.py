# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .defect_photo_response_response_body import DefectPhotoResponseResponseBody
from .defect_trailer_response_response_body import DefectTrailerResponseResponseBody
from .defect_vehicle_response_response_body import DefectVehicleResponseResponseBody
from .dvir_resolved_by_object_response_body import DvirResolvedByObjectResponseBody


class DvirDefectGetDefectResponseBody(UniversalBaseModel):
    comment: str = pydantic.Field()
    """
    Comment on the defect.
    """

    created_at_time: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdAtTime")] = (
        pydantic.Field(default=None)
    )
    """
    Time when defect was created in RFC 3339 format.
    """

    defect_photos: typing_extensions.Annotated[
        typing.Optional[typing.List[DefectPhotoResponseResponseBody]], FieldMetadata(alias="defectPhotos")
    ] = pydantic.Field(default=None)
    """
    List of DVIR defect's photos
    """

    defect_type_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="defectTypeId")] = (
        pydantic.Field(default=None)
    )
    """
    The unique ID of the defect type.
    """

    dvir_id: typing_extensions.Annotated[str, FieldMetadata(alias="dvirId")] = pydantic.Field()
    """
    The unique ID of the defect's DVIR.
    """

    id: str = pydantic.Field()
    """
    The unique ID of the DVIR defect.
    """

    is_resolved: typing_extensions.Annotated[bool, FieldMetadata(alias="isResolved")] = pydantic.Field()
    """
    Signifies if this defect is resolved.
    """

    mechanic_notes: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="mechanicNotes")] = (
        pydantic.Field(default=None)
    )
    """
    The mechanics notes on the defect.
    """

    resolved_at_time: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="resolvedAtTime")] = (
        pydantic.Field(default=None)
    )
    """
    Time when this defect was resolved in RFC 3339 format. Will not be returned if the defect is unresolved.
    """

    resolved_by: typing_extensions.Annotated[
        typing.Optional[DvirResolvedByObjectResponseBody], FieldMetadata(alias="resolvedBy")
    ] = None
    trailer: typing.Optional[DefectTrailerResponseResponseBody] = None
    updated_at_time: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="updatedAtTime")] = (
        pydantic.Field(default=None)
    )
    """
    Time when defect was last updated in RFC 3339 format.
    """

    vehicle: typing.Optional[DefectVehicleResponseResponseBody] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
