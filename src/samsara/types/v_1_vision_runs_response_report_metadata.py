# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class V1VisionRunsResponseReportMetadata(UniversalBaseModel):
    """
    The response includes 4 additional fields that are now deprecated
    """

    items_per_minute: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="itemsPerMinute")] = (
        pydantic.Field(default=None)
    )
    """
    Returns average scanned items per minute. Should be used instead of scanRate.
    """

    no_read_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="noReadCount")] = (
        pydantic.Field(default=None)
    )
    """
    Returns no read count for the run. Should be used instead of noReadScansCount
    """

    reject_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="rejectCount")] = (
        pydantic.Field(default=None)
    )
    """
    Returns reject count for the run. Should be used instead of failedScansCount
    """

    success_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="successCount")] = (
        pydantic.Field(default=None)
    )
    """
    Returns success count for the run. Should be used instead of successfulScansCount
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
