# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .work_order_money_object_response_body import WorkOrderMoneyObjectResponseBody


class ServiceTaskDefinitionObjectResponseBody(UniversalBaseModel):
    """
    A service task definition object.
    """

    category: typing.Optional[str] = pydantic.Field(default=None)
    """
    The category of the service task.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    A description of the service task.
    """

    estimated_labor_time_minutes: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="estimatedLaborTimeMinutes")
    ] = pydantic.Field(default=None)
    """
    Estimated time in minutes to complete the task.
    """

    estimated_parts_cost: typing_extensions.Annotated[
        typing.Optional[WorkOrderMoneyObjectResponseBody], FieldMetadata(alias="estimatedPartsCost")
    ] = None
    id: str = pydantic.Field()
    """
    The unique id of the service task definition.
    """

    name: str = pydantic.Field()
    """
    The name of the service task.
    """

    subcategory: typing.Optional[str] = pydantic.Field(default=None)
    """
    The subcategory of the service task.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
