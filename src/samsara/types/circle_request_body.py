# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class CircleRequestBody(UniversalBaseModel):
    """
    Information about a circular geofence. This field is only needed if the geofence is a circle.
    """

    latitude: typing.Optional[float] = pydantic.Field(default=None)
    """
    Latitude of the address. Will be geocoded from formattedAddress if not provided.
    """

    longitude: typing.Optional[float] = pydantic.Field(default=None)
    """
    Longitude of the address. Will be geocoded from formattedAddress if not provided.
    """

    name: str = pydantic.Field()
    """
    The name of the cirlce.
    """

    radius_meters: typing_extensions.Annotated[int, FieldMetadata(alias="radiusMeters")] = pydantic.Field()
    """
    The radius of the circular geofence in meters.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
