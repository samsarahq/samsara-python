# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .alert_event_alert_condition_id import AlertEventAlertConditionId
from .alert_event_device import AlertEventDevice
from .alert_event_driver import AlertEventDriver
from .alert_event_dvir import AlertEventDvir


class AlertEvent(UniversalBaseModel):
    alert_event_url: typing_extensions.Annotated[str, FieldMetadata(alias="alertEventUrl")] = pydantic.Field()
    """
    Link to the alert in the Samsara dashboard
    """

    alert_condition_description: typing_extensions.Annotated[str, FieldMetadata(alias="alertConditionDescription")] = (
        pydantic.Field()
    )
    """
    Human-readable description of the alert condition
    """

    alert_condition_id: typing_extensions.Annotated[
        AlertEventAlertConditionId, FieldMetadata(alias="alertConditionId")
    ] = pydantic.Field()
    """
    Identifier for the type of alert
    """

    details: str = pydantic.Field()
    """
    Human-readable string with dynamic details about the alert
    """

    org_id: typing_extensions.Annotated[int, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    Organization ID
    """

    resolved: bool = pydantic.Field()
    """
    Whether the alert has been resolved
    """

    start_ms: typing_extensions.Annotated[int, FieldMetadata(alias="startMs")] = pydantic.Field()
    """
    Unix epoch timestamp when the event was triggered
    """

    summary: str = pydantic.Field()
    """
    Brief summary of the event
    """

    device: typing.Optional[AlertEventDevice] = None
    driver: typing.Optional[AlertEventDriver] = None
    dvir: typing.Optional[AlertEventDvir] = pydantic.Field(default=None)
    """
    DVIR-specific fields
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
