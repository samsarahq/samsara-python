# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .training_assignment_near_due_date_trigger_assignment_group_object_request_body import (
    TrainingAssignmentNearDueDateTriggerAssignmentGroupObjectRequestBody,
)
from .training_assignment_near_due_date_trigger_details_object_request_body_condition_units import (
    TrainingAssignmentNearDueDateTriggerDetailsObjectRequestBodyConditionUnits,
)


class TrainingAssignmentNearDueDateTriggerDetailsObjectRequestBody(UniversalBaseModel):
    """
    Details specific to Training Assignment Near Due Date
    """

    assignment_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[TrainingAssignmentNearDueDateTriggerAssignmentGroupObjectRequestBody]],
        FieldMetadata(alias="assignmentGroups"),
    ] = pydantic.Field(default=None)
    """
    The assignment groups the trigger is configured for.
    """

    condition_units: typing_extensions.Annotated[
        TrainingAssignmentNearDueDateTriggerDetailsObjectRequestBodyConditionUnits,
        FieldMetadata(alias="conditionUnits"),
    ] = pydantic.Field()
    """
    Whether the trigger is configured in days or weeks.  Valid values: `DAYS`, `WEEKS`
    """

    condition_value: typing_extensions.Annotated[int, FieldMetadata(alias="conditionValue")] = pydantic.Field()
    """
    The number of days or weeks near the due date to trigger on.
    """

    timezone: str = pydantic.Field()
    """
    The timezone that the alert will be set up in.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
