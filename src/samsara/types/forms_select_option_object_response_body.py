# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class FormsSelectOptionObjectResponseBody(UniversalBaseModel):
    """
    Multiple choice or checkbox value option object.
    """

    id: str = pydantic.Field()
    """
    Identifier of the option.
    """

    ignore_question_from_score_if_selected: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="ignoreQuestionFromScoreIfSelected")
    ] = pydantic.Field(default=None)
    """
    Indicates whether the question should be ignored from the total score if this option is selected. Returns true if a score weight was not given to this option. Only present when the select form field has scoring.
    """

    label: str = pydantic.Field()
    """
    Label of the option.
    """

    option_score_weight: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="optionScoreWeight")] = (
        pydantic.Field(default=None)
    )
    """
    Score weight of the option, indicates number of score points received if this option is selected. Only present if the select form field has scoring.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
