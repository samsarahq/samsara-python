# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .goa_address_tiny_response_response_body import GoaAddressTinyResponseResponseBody
from .goa_document_tiny_response_response_body import GoaDocumentTinyResponseResponseBody
from .live_sharing_link_response_object_response_body import LiveSharingLinkResponseObjectResponseBody
from .routes_single_use_address_object_response_body import RoutesSingleUseAddressObjectResponseBody
from .routes_stop_response_object_response_body_state import RoutesStopResponseObjectResponseBodyState


class RoutesStopResponseObjectResponseBody(UniversalBaseModel):
    actual_arrival_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="actualArrivalTime")
    ] = pydantic.Field(default=None)
    """
    Actual arrival time, if it exists, for the route stop in RFC 3339 format.
    """

    actual_departure_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="actualDepartureTime")
    ] = pydantic.Field(default=None)
    """
    Actual departure time, if it exists, for the route stop in RFC 3339 format.
    """

    address: typing.Optional[GoaAddressTinyResponseResponseBody] = None
    documents: typing.Optional[typing.List[GoaDocumentTinyResponseResponseBody]] = pydantic.Field(default=None)
    """
    List of documents associated with the stop.
    """

    en_route_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="enRouteTime")] = (
        pydantic.Field(default=None)
    )
    """
    The time the stop became en-route, in RFC 3339 format.
    """

    eta: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Estimated time of arrival, if this stop is currently en-route, in RFC 3339 format.
    """

    external_ids: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, str]], FieldMetadata(alias="externalIds")
    ] = pydantic.Field(default=None)
    """
    A map of external ids
    """

    id: str = pydantic.Field()
    """
    Id of the stop
    """

    live_sharing_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="liveSharingUrl")] = (
        pydantic.Field(default=None)
    )
    """
    The shareable url of the stop's current status.
    """

    location_live_sharing_links: typing_extensions.Annotated[
        typing.Optional[typing.List[LiveSharingLinkResponseObjectResponseBody]],
        FieldMetadata(alias="locationLiveSharingLinks"),
    ] = pydantic.Field(default=None)
    """
    List of shareable, non-expired 'By Location' Live Sharing Links.
    """

    name: str = pydantic.Field()
    """
    Name of the stop
    """

    notes: typing.Optional[str] = pydantic.Field(default=None)
    """
    Notes for the stop
    """

    ontime_window_after_arrival_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="ontimeWindowAfterArrivalMs")
    ] = pydantic.Field(default=None)
    """
    Specifies the time window (in milliseconds) after a stop's scheduled arrival time during which the stop is considered 'on-time'.
    """

    ontime_window_before_arrival_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="ontimeWindowBeforeArrivalMs")
    ] = pydantic.Field(default=None)
    """
    Specifies the time window (in milliseconds) before a stop's scheduled arrival time during which the stop is considered 'on-time'.
    """

    scheduled_arrival_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="scheduledArrivalTime")
    ] = pydantic.Field(default=None)
    """
    Scheduled arrival time, if it exists, for the stop in RFC 3339 format.
    """

    scheduled_departure_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="scheduledDepartureTime")
    ] = pydantic.Field(default=None)
    """
    Scheduled departure time, if it exists, for the stop in RFC 3339 format.
    """

    single_use_location: typing_extensions.Annotated[
        typing.Optional[RoutesSingleUseAddressObjectResponseBody], FieldMetadata(alias="singleUseLocation")
    ] = None
    skipped_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="skippedTime")] = (
        pydantic.Field(default=None)
    )
    """
    Skipped time, if it exists, for the route stop in RFC 3339 format.
    """

    state: RoutesStopResponseObjectResponseBodyState = pydantic.Field()
    """
    The current state of the route stop.  Valid values: `unassigned`, `scheduled`, `en route`, `skipped`, `arrived`, `departed`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
