# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .vehicle_stats_fault_codes_tx_id import VehicleStatsFaultCodesTxId
from .vehicle_stats_fault_codes_vendor_specific_fields import VehicleStatsFaultCodesVendorSpecificFields


class VehicleStatsFaultCodesJ1939TroubleCode(UniversalBaseModel):
    """
    Diagnostic trouble code for J1939 vehicles.
    """

    fmi_description: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fmiDescription")] = (
        pydantic.Field(default=None)
    )
    """
    A short description of the FMI identifier, if available.
    """

    fmi_id: typing_extensions.Annotated[int, FieldMetadata(alias="fmiId")] = pydantic.Field()
    """
    The FMI identifier.
    """

    mil_status: typing_extensions.Annotated[int, FieldMetadata(alias="milStatus")] = pydantic.Field()
    """
    The MIL status, indicating a check engine light.
    """

    occurrence_count: typing_extensions.Annotated[int, FieldMetadata(alias="occurrenceCount")] = pydantic.Field()
    """
    The number of times this fault has triggered.
    """

    source_address_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="sourceAddressName")] = (
        pydantic.Field(default=None)
    )
    """
    The source address name corresponding to the txId
    """

    spn_description: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="spnDescription")] = (
        pydantic.Field(default=None)
    )
    """
    A short description of the SPN identifier, if available.
    """

    spn_id: typing_extensions.Annotated[int, FieldMetadata(alias="spnId")] = pydantic.Field()
    """
    The SPN identifier.
    """

    tx_id: typing_extensions.Annotated[VehicleStatsFaultCodesTxId, FieldMetadata(alias="txId")]
    vendor_specific_fields: typing_extensions.Annotated[
        typing.Optional[VehicleStatsFaultCodesVendorSpecificFields], FieldMetadata(alias="vendorSpecificFields")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
