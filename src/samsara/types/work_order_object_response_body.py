# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .service_task_instance_object_response_body import ServiceTaskInstanceObjectResponseBody
from .work_order_attachment_object_response_body import WorkOrderAttachmentObjectResponseBody
from .work_order_discount_object_response_body import WorkOrderDiscountObjectResponseBody
from .work_order_item_object_response_body import WorkOrderItemObjectResponseBody
from .work_order_object_response_body_category import WorkOrderObjectResponseBodyCategory
from .work_order_object_response_body_priority import WorkOrderObjectResponseBodyPriority
from .work_order_object_response_body_status import WorkOrderObjectResponseBodyStatus
from .work_order_tax_object_response_body import WorkOrderTaxObjectResponseBody


class WorkOrderObjectResponseBody(UniversalBaseModel):
    """
    A work order object.
    """

    archived_at_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="archivedAtTime")
    ] = pydantic.Field(default=None)
    """
    The time the work order was archived in RFC 3339 format.
    """

    asset_id: typing_extensions.Annotated[str, FieldMetadata(alias="assetId")] = pydantic.Field()
    """
    The ID of the asset.
    """

    assigned_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assignedUserId")] = (
        pydantic.Field(default=None)
    )
    """
    The ID of the assigned mechanic.
    """

    attachments: typing.Optional[typing.List[WorkOrderAttachmentObjectResponseBody]] = pydantic.Field(default=None)
    """
    Files attached to the work order.
    """

    category: typing.Optional[WorkOrderObjectResponseBodyCategory] = pydantic.Field(default=None)
    """
    The category of the work order  Valid values: `Annual`, `Corrective`, `Damage Repair`, `Preventive`, `Recall`, `Unspecified`
    """

    closing_notes: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="closingNotes")] = (
        pydantic.Field(default=None)
    )
    """
    Notes on the work order.
    """

    completed_at_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="completedAtTime")
    ] = pydantic.Field(default=None)
    """
    The time the work order was completed in RFC 3339 format.
    """

    created_at_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAtTime")] = pydantic.Field()
    """
    The time the work order was created in RFC 3339 format.
    """

    created_by_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdByUserId")] = (
        pydantic.Field(default=None)
    )
    """
    The ID of the creator of the work order.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    A description of what needs to be fixed.
    """

    discount: typing.Optional[WorkOrderDiscountObjectResponseBody] = None
    due_at_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="dueAtTime")] = (
        pydantic.Field(default=None)
    )
    """
    The due date of the work order in RFC 3339 format.
    """

    engine_hours: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="engineHours")] = (
        pydantic.Field(default=None)
    )
    """
    The engine hours at the time of the work order.
    """

    id: str = pydantic.Field()
    """
    The unique id of the work order.
    """

    items: typing.Optional[typing.List[WorkOrderItemObjectResponseBody]] = pydantic.Field(default=None)
    """
    Items related to the work order.
    """

    odometer_meters: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="odometerMeters")] = (
        pydantic.Field(default=None)
    )
    """
    The odometer reading at the time of the work order.
    """

    priority: typing.Optional[WorkOrderObjectResponseBodyPriority] = pydantic.Field(default=None)
    """
    The priority of the work order  Valid values: `High`, `Low`, `Medium`, `Urgent`
    """

    service_task_instances: typing_extensions.Annotated[
        typing.Optional[typing.List[ServiceTaskInstanceObjectResponseBody]], FieldMetadata(alias="serviceTaskInstances")
    ] = pydantic.Field(default=None)
    """
    Service Tasks for the work order.
    """

    status: WorkOrderObjectResponseBodyStatus = pydantic.Field()
    """
    The status of the work order  Valid values: `Assigned`, `Cancelled`, `Closed`, `Completed`, `In Progress`, `On Hold`, `Open`, `Pending Approval`, `Pending Parts`
    """

    tax: typing.Optional[WorkOrderTaxObjectResponseBody] = None
    updated_at_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAtTime")] = pydantic.Field()
    """
    The time the work order was last updated in RFC 3339 format.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
