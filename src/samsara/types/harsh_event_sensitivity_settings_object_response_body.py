# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .harsh_accel_sensitivity_g_force_settings_object_response_body import (
    HarshAccelSensitivityGForceSettingsObjectResponseBody,
)
from .harsh_brake_sensitivity_g_force_settings_object_response_body import (
    HarshBrakeSensitivityGForceSettingsObjectResponseBody,
)
from .harsh_turn_sensitivity_g_force_settings_object_response_body import (
    HarshTurnSensitivityGForceSettingsObjectResponseBody,
)


class HarshEventSensitivitySettingsObjectResponseBody(UniversalBaseModel):
    """
    The configurable sensitivity for Harsh Event Detection on CM11/CM12/CM22 devices. Sensitivity can be measured as a numeric g-force value or the following values: `Normal`, `Less Sensitive`, `More Sensitive`.
    """

    harsh_accel_sensitivity_g_force: typing_extensions.Annotated[
        typing.Optional[HarshAccelSensitivityGForceSettingsObjectResponseBody],
        FieldMetadata(alias="harshAccelSensitivityGForce"),
    ] = None
    harsh_brake_sensitivity_g_force: typing_extensions.Annotated[
        typing.Optional[HarshBrakeSensitivityGForceSettingsObjectResponseBody],
        FieldMetadata(alias="harshBrakeSensitivityGForce"),
    ] = None
    harsh_turn_sensitivity_g_force: typing_extensions.Annotated[
        typing.Optional[HarshTurnSensitivityGForceSettingsObjectResponseBody],
        FieldMetadata(alias="harshTurnSensitivityGForce"),
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
