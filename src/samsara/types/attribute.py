# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .attribute_attribute_type import AttributeAttributeType
from .attribute_attribute_value_quantity import AttributeAttributeValueQuantity
from .attribute_entity_type import AttributeEntityType
from .attribute_value_tiny import AttributeValueTiny


class Attribute(UniversalBaseModel):
    attribute_type: typing_extensions.Annotated[
        typing.Optional[AttributeAttributeType], FieldMetadata(alias="attributeType")
    ] = pydantic.Field(default=None)
    """
    Denotes the data type of the attribute's values. Valid values: `string`, `number`.
    """

    attribute_value_quantity: typing_extensions.Annotated[
        typing.Optional[AttributeAttributeValueQuantity], FieldMetadata(alias="attributeValueQuantity")
    ] = pydantic.Field(default=None)
    """
    Defines whether or not this attribute can be used on the same entity many times (with different values). Valid values: `single`, `multi`.
    """

    entity_type: typing_extensions.Annotated[
        typing.Optional[AttributeEntityType], FieldMetadata(alias="entityType")
    ] = pydantic.Field(default=None)
    """
    Denotes the type of entity, driver or asset. Valid values: `driver`, `asset`.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The samsara id of the attribute object.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of attribute.
    """

    number_values: typing_extensions.Annotated[
        typing.Optional[typing.List[float]], FieldMetadata(alias="numberValues")
    ] = pydantic.Field(default=None)
    """
    Number values that can be associated with this attribute
    """

    string_values: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="stringValues")
    ] = pydantic.Field(default=None)
    """
    String values that can be associated with this attribute
    """

    values: typing.Optional[typing.List[AttributeValueTiny]] = pydantic.Field(default=None)
    """
    Representation of values that includes ids.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
