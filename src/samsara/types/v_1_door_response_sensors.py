# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class V1DoorResponseSensors(UniversalBaseModel):
    door_closed: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="doorClosed")] = pydantic.Field(
        default=None
    )
    """
    Flag indicating whether the current door is closed or open.
    """

    door_status_time: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="doorStatusTime")] = (
        pydantic.Field(default=None)
    )
    """
    The timestamp of reported door status, specified in RFC 3339 time.
    """

    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    ID of the sensor.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the sensor.
    """

    trailer_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="trailerId")] = pydantic.Field(
        default=None
    )
    """
    ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.
    """

    vehicle_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="vehicleId")] = pydantic.Field(
        default=None
    )
    """
    ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
