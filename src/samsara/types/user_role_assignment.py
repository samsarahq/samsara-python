# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .tag_tiny_response import TagTinyResponse
from .user_expire_at import UserExpireAt
from .user_role import UserRole


class UserRoleAssignment(UniversalBaseModel):
    """
    A role that applies to a user. If the role has a `tag`, then the role applies for that tag. If there is no `tag`, then the role applies at the organizational level. A user may have many tag-specific roles, but may only have one organizational level role. If the organizational level role has higher privileges than a tag-specific role, then the organizational role privileges will take precedence.
    """

    expire_at: typing_extensions.Annotated[typing.Optional[UserExpireAt], FieldMetadata(alias="expireAt")] = None
    role: typing.Optional[UserRole] = None
    tag: typing.Optional[TagTinyResponse] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
