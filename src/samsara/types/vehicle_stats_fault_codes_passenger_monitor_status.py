# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .vehicle_stats_fault_codes_passenger_monitor_status_value import VehicleStatsFaultCodesPassengerMonitorStatusValue


class VehicleStatsFaultCodesPassengerMonitorStatus(UniversalBaseModel):
    """
    Readings from engine sensors
    """

    catalyst: typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue] = None
    comprehensive: typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue] = None
    egr: typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue] = None
    evap_system: typing_extensions.Annotated[
        typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue], FieldMetadata(alias="evapSystem")
    ] = None
    fuel: typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue] = None
    heated_catalyst: typing_extensions.Annotated[
        typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue], FieldMetadata(alias="heatedCatalyst")
    ] = None
    heated_o_2_sensor: typing_extensions.Annotated[
        typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue], FieldMetadata(alias="heatedO2Sensor")
    ] = None
    iso_sae_reserved: typing_extensions.Annotated[
        typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue], FieldMetadata(alias="isoSaeReserved")
    ] = None
    misfire: typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue] = None
    not_ready_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="notReadyCount")] = (
        pydantic.Field(default=None)
    )
    """
    Count of the number of sensors reporting N: Not Complete
    """

    o_2_sensor: typing_extensions.Annotated[
        typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue], FieldMetadata(alias="o2Sensor")
    ] = None
    secondary_air: typing_extensions.Annotated[
        typing.Optional[VehicleStatsFaultCodesPassengerMonitorStatusValue], FieldMetadata(alias="secondaryAir")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
