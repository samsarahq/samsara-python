# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .unit_response_body_base_unit import UnitResponseBodyBaseUnit
from .unit_response_body_measurement_type import UnitResponseBodyMeasurementType


class UnitResponseBody(UniversalBaseModel):
    """
    Unit information
    """

    base_unit: typing_extensions.Annotated[
        typing.Optional[UnitResponseBodyBaseUnit], FieldMetadata(alias="baseUnit")
    ] = pydantic.Field(default=None)
    """
    Unit of measurement  Valid values: `bar`, `celsius`, `day`, `decimaldegrees`, `fahrenheit`, `foot`, `gallon`, `gallonperkilogram`, `gallonsperhour`, `galpermi`, `gforce`, `gperliter`, `gperm`, `hour`, `imperialgallonperkilogram`, `impgallon`, `impgallonsperhour`, `impgalpermi`, `inch`, `kelvin`, `kgper100kmgaseousfuel`, `kgpergallon`, `kgperkm`, `kgperliter`, `kgpermi`, `kilogram`, `kilogramgaseousfuel`, `kilometer`, `kilopascal`, `kilowatthour`, `kmperhr`, `kmperl`, `kmperlgaseousfuel`, `lbpermi`, `liter`, `litergaseousfuel`, `literperkilogram`, `literpertonne`, `litersperhour`, `lper100km`, `lper100kmgaseousfuel`, `lperkm`, `lperm`, `meter`, `meterspersec`, `mile`, `milliknot`, `millisecond`, `millivolt`, `minute`, `mipergal`, `miperhr`, `miperimpgal`, `month`, `mpgusgalgaseousfuel`, `mpkggaseousfuel`, `percent`, `pound`, `poundsPerSquareInch`, `poundspergallon`, `poundsperliter`, `rpm`, `second`, `usd`, `usgallongaseousfuel`, `volt`, `watthour`, `week`
    """

    measurement_type: typing_extensions.Annotated[
        typing.Optional[UnitResponseBodyMeasurementType], FieldMetadata(alias="measurementType")
    ] = pydantic.Field(default=None)
    """
    Type of measurement  Valid values: `acceleration`, `co2EmissionsPerVolumeRate`, `currency`, `distance`, `drySpreadRate`, `duration`, `energy`, `fuelBurn`, `fuelEconomy`, `gaseousFuel`, `gaseousFuelEconomy`, `geographicCoordinate`, `pressure`, `ratio`, `rotationalSpeed`, `speed`, `temperature`, `time`, `voltage`, `volume`, `volumePerWeight`, `weight`, `wetSpreadRate`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
