# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .alert_event_dvir_defects_item import AlertEventDvirDefectsItem
from .alert_event_dvir_driver import AlertEventDvirDriver
from .alert_event_dvir_inspection_type import AlertEventDvirInspectionType
from .alert_event_dvir_safety_status import AlertEventDvirSafetyStatus
from .alert_event_dvir_trailer import AlertEventDvirTrailer
from .alert_event_dvir_vehicle import AlertEventDvirVehicle


class AlertEventDvir(UniversalBaseModel):
    """
    DVIR-specific fields
    """

    dvir_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dvirId")] = pydantic.Field(
        default=None
    )
    """
    ID of the DVIR
    """

    vehicle: typing.Optional[AlertEventDvirVehicle] = None
    trailer: typing.Optional[AlertEventDvirTrailer] = None
    driver: typing.Optional[AlertEventDvirDriver] = None
    odometer: typing.Optional[int] = pydantic.Field(default=None)
    """
    Odometer value in meters
    """

    inspection_type: typing_extensions.Annotated[
        typing.Optional[AlertEventDvirInspectionType], FieldMetadata(alias="inspectionType")
    ] = None
    safety_status: typing_extensions.Annotated[
        typing.Optional[AlertEventDvirSafetyStatus], FieldMetadata(alias="safetyStatus")
    ] = None
    defects: typing.Optional[typing.List[AlertEventDvirDefectsItem]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
