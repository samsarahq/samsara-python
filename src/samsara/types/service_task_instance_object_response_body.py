# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .service_task_instance_object_response_body_status import ServiceTaskInstanceObjectResponseBodyStatus
from .work_order_money_object_response_body import WorkOrderMoneyObjectResponseBody


class ServiceTaskInstanceObjectResponseBody(UniversalBaseModel):
    """
    Work Order Service Task object.
    """

    id: str = pydantic.Field()
    """
    ID of the service task instance.
    """

    labor_hourly_cost: typing_extensions.Annotated[
        typing.Optional[WorkOrderMoneyObjectResponseBody], FieldMetadata(alias="laborHourlyCost")
    ] = None
    labor_time_minutes: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="laborTimeMinutes")] = (
        pydantic.Field(default=None)
    )
    """
    The time of labor needed
    """

    parts_cost: typing_extensions.Annotated[
        typing.Optional[WorkOrderMoneyObjectResponseBody], FieldMetadata(alias="partsCost")
    ] = None
    service_task_id: typing_extensions.Annotated[str, FieldMetadata(alias="serviceTaskId")] = pydantic.Field()
    """
    ID of the service task.
    """

    status: ServiceTaskInstanceObjectResponseBodyStatus = pydantic.Field()
    """
    The status of the service task.  Valid values: `Unknown`, `Open`, `In Progress`, `On Hold`, `Completed`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
