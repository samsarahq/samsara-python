# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class V1VisionStepResultsItemFindCopies(UniversalBaseModel):
    angle_tolerance: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="angleTolerance")] = (
        pydantic.Field(default=None)
    )
    """
    The orientation angle tolerance (+/- Â°)
    """

    found_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="foundCount")] = pydantic.Field(
        default=None
    )
    """
    The number of copies found
    """

    max_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxCount")] = pydantic.Field(
        default=None
    )
    """
    The maximum number of copies allowed
    """

    min_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="minCount")] = pydantic.Field(
        default=None
    )
    """
    The minimum number of copies allowed
    """

    threshold: typing.Optional[int] = pydantic.Field(default=None)
    """
    The minimum required similarity (in %) of a found copy compared to the configured match region
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
