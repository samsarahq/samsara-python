# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .forms_check_boxes_value_object_response_body import FormsCheckBoxesValueObjectResponseBody
from .forms_date_time_value_object_response_body import FormsDateTimeValueObjectResponseBody
from .forms_media_record_object_response_body import FormsMediaRecordObjectResponseBody
from .forms_multiple_choice_value_object_response_body import FormsMultipleChoiceValueObjectResponseBody
from .forms_number_value_object_response_body import FormsNumberValueObjectResponseBody
from .forms_signature_value_object_response_body import FormsSignatureValueObjectResponseBody
from .forms_table_value_object_response_body import FormsTableValueObjectResponseBody
from .forms_text_value_object_response_body import FormsTextValueObjectResponseBody
from .qualification_field_input_object_response_body_type import QualificationFieldInputObjectResponseBodyType


class QualificationFieldInputObjectResponseBody(UniversalBaseModel):
    """
    Qualification input field object.
    """

    check_boxes_value: typing_extensions.Annotated[
        typing.Optional[FormsCheckBoxesValueObjectResponseBody], FieldMetadata(alias="checkBoxesValue")
    ] = None
    date_time_value: typing_extensions.Annotated[
        typing.Optional[FormsDateTimeValueObjectResponseBody], FieldMetadata(alias="dateTimeValue")
    ] = None
    id: str = pydantic.Field()
    """
    ID of the qualification input field object.
    """

    label: typing.Optional[str] = pydantic.Field(default=None)
    """
    Qualification input field label.
    """

    media_list: typing_extensions.Annotated[
        typing.Optional[typing.List[FormsMediaRecordObjectResponseBody]], FieldMetadata(alias="mediaList")
    ] = pydantic.Field(default=None)
    """
    List of qualification media record objects.
    """

    multiple_choice_value: typing_extensions.Annotated[
        typing.Optional[FormsMultipleChoiceValueObjectResponseBody], FieldMetadata(alias="multipleChoiceValue")
    ] = None
    number_value: typing_extensions.Annotated[
        typing.Optional[FormsNumberValueObjectResponseBody], FieldMetadata(alias="numberValue")
    ] = None
    signature_value: typing_extensions.Annotated[
        typing.Optional[FormsSignatureValueObjectResponseBody], FieldMetadata(alias="signatureValue")
    ] = None
    table_value: typing_extensions.Annotated[
        typing.Optional[FormsTableValueObjectResponseBody], FieldMetadata(alias="tableValue")
    ] = None
    text_value: typing_extensions.Annotated[
        typing.Optional[FormsTextValueObjectResponseBody], FieldMetadata(alias="textValue")
    ] = None
    type: QualificationFieldInputObjectResponseBodyType = pydantic.Field()
    """
    Type of the qualification field.  Valid values: `number`, `text`, `multiple_choice`, `check_boxes`, `datetime`, `signature`, `media`, `table`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
