# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .workflow_incident_details_object_response_body import WorkflowIncidentDetailsObjectResponseBody


class WorkflowIncidentConditionObjectResponseBody(UniversalBaseModel):
    """
    Object representing the granular details of the condition. These details will vary depending on the condition.
    """

    description: str = pydantic.Field()
    """
    Descriptive name of the condition.
    """

    details: WorkflowIncidentDetailsObjectResponseBody
    trigger_id: typing_extensions.Annotated[int, FieldMetadata(alias="triggerId")] = pydantic.Field()
    """
    Unique identifier describing the type of condition being represented.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
