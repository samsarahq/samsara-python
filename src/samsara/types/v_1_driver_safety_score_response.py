# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .v_1_safety_report_harsh_event import V1SafetyReportHarshEvent


class V1DriverSafetyScoreResponse(UniversalBaseModel):
    """
    Safety score details for a driver
    """

    crash_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="crashCount")] = pydantic.Field(
        default=None
    )
    """
    Crash event count
    """

    driver_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="driverId")] = pydantic.Field(
        default=None
    )
    """
    Driver ID
    """

    harsh_accel_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="harshAccelCount")] = (
        pydantic.Field(default=None)
    )
    """
    Harsh acceleration event count
    """

    harsh_braking_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="harshBrakingCount")] = (
        pydantic.Field(default=None)
    )
    """
    Harsh braking event count
    """

    harsh_events: typing_extensions.Annotated[
        typing.Optional[typing.List[V1SafetyReportHarshEvent]], FieldMetadata(alias="harshEvents")
    ] = None
    harsh_turning_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="harshTurningCount")] = (
        pydantic.Field(default=None)
    )
    """
    Harsh turning event count
    """

    safety_score: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="safetyScore")] = (
        pydantic.Field(default=None)
    )
    """
    The driverâ€™s Safety Score for the requested period. Note that if the driver has zero drive time in this period, the Safety Score will be returned as 100.
    """

    safety_score_rank: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="safetyScoreRank")] = (
        pydantic.Field(default=None)
    )
    """
    Safety Score Rank
    """

    time_over_speed_limit_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="timeOverSpeedLimitMs")
    ] = pydantic.Field(default=None)
    """
    Amount of time driven over the speed limit in milliseconds
    """

    total_distance_driven_meters: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="totalDistanceDrivenMeters")
    ] = pydantic.Field(default=None)
    """
    Total distance driven in meters
    """

    total_harsh_event_count: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="totalHarshEventCount")
    ] = pydantic.Field(default=None)
    """
    Total harsh event count
    """

    total_time_driven_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="totalTimeDrivenMs")
    ] = pydantic.Field(default=None)
    """
    Amount of time driven in milliseconds
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
