# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .dvir_submitted_device_trigger_details_object_request_body_dvir_submission_types_item import (
    DvirSubmittedDeviceTriggerDetailsObjectRequestBodyDvirSubmissionTypesItem,
)


class DvirSubmittedDeviceTriggerDetailsObjectRequestBody(UniversalBaseModel):
    """
    Details specific to DVIR Submitted by Device
    """

    dvir_min_duration_milliseconds: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="dvirMinDurationMilliseconds")
    ] = pydantic.Field(default=None)
    """
    The trigger will only fire if the selected DVIR types are submitted within the duration.
    """

    dvir_submission_types: typing_extensions.Annotated[
        typing.Optional[typing.List[DvirSubmittedDeviceTriggerDetailsObjectRequestBodyDvirSubmissionTypesItem]],
        FieldMetadata(alias="dvirSubmissionTypes"),
    ] = pydantic.Field(default=None)
    """
    Filter to these types of DVIR submissions.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
