# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class FormsScoreObjectResponseBody(UniversalBaseModel):
    """
    Forms score object.
    """

    max_points: typing_extensions.Annotated[float, FieldMetadata(alias="maxPoints")] = pydantic.Field()
    """
    Total possible points of the form submission.
    """

    score_percent: typing_extensions.Annotated[float, FieldMetadata(alias="scorePercent")] = pydantic.Field()
    """
    Percentage score of the form submission, calculated as scorePoints / maxPoints.
    """

    score_points: typing_extensions.Annotated[float, FieldMetadata(alias="scorePoints")] = pydantic.Field()
    """
    Score, in points, of the form submission.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
