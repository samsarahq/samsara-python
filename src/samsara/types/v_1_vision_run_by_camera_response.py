# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .v_1_vision_run_by_camera_response_inspection_results import V1VisionRunByCameraResponseInspectionResults
from .v_1_vision_run_by_camera_response_program import V1VisionRunByCameraResponseProgram
from .v_1_vision_run_by_camera_response_run_summary import V1VisionRunByCameraResponseRunSummary


class V1VisionRunByCameraResponse(UniversalBaseModel):
    camera_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="cameraId")] = None
    ended_at_ms: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="endedAtMs")] = None
    inspection_results: typing_extensions.Annotated[
        typing.Optional[typing.List[V1VisionRunByCameraResponseInspectionResults]],
        FieldMetadata(alias="inspectionResults"),
    ] = None
    is_ongoing: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isOngoing")] = None
    program: typing.Optional[V1VisionRunByCameraResponseProgram] = None
    run_summary: typing_extensions.Annotated[
        typing.Optional[V1VisionRunByCameraResponseRunSummary], FieldMetadata(alias="runSummary")
    ] = None
    started_at_ms: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="startedAtMs")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
