# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class DriverEfficiencyRawDataObjectResponseBody(UniversalBaseModel):
    """
    Driver Efficiency raw data. This object is returned when the “raw” format is specified in “dataFormats”.
    """

    anticipation_brake_event_count: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="anticipationBrakeEventCount")
    ] = pydantic.Field(default=None)
    """
    Total number of quick braking events (less than one second after accelerating).
    """

    average_vehicle_weight_kg: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="averageVehicleWeightKg")
    ] = pydantic.Field(default=None)
    """
    Average vehicle weight in kilograms.
    """

    coasting_duration_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="coastingDurationMs")
    ] = pydantic.Field(default=None)
    """
    Time spent without engaging the accelerator or brake in milliseconds.
    """

    cruise_control_duration_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="cruiseControlDurationMs")
    ] = pydantic.Field(default=None)
    """
    Time spent in cruise control in milliseconds.
    """

    drive_time_duration_ms: typing_extensions.Annotated[int, FieldMetadata(alias="driveTimeDurationMs")] = (
        pydantic.Field()
    )
    """
    Total driving time in milliseconds.
    """

    engine_on_duration_ms: typing_extensions.Annotated[int, FieldMetadata(alias="engineOnDurationMs")] = (
        pydantic.Field()
    )
    """
    Total engine-on time in milliseconds.
    """

    green_band_duration_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="greenBandDurationMs")
    ] = pydantic.Field(default=None)
    """
    Time spent driving within the configurable green band in milliseconds.
    """

    high_grade_road_driving_duration_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="highGradeRoadDrivingDurationMs")
    ] = pydantic.Field(default=None)
    """
    Time spent driving on high-grade roads in milliseconds.
    """

    high_torque_duration_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="highTorqueDurationMs")
    ] = pydantic.Field(default=None)
    """
    Time the vehicle engine torque is greater than 90% in milliseconds. 
    """

    idling_duration_ms: typing_extensions.Annotated[int, FieldMetadata(alias="idlingDurationMs")] = pydantic.Field()
    """
    Time spent idling in milliseconds.
    """

    over_speed_duration_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="overSpeedDurationMs")
    ] = pydantic.Field(default=None)
    """
    Time spent over-speeding in milliseconds.
    """

    total_brake_duration_ms: typing_extensions.Annotated[int, FieldMetadata(alias="totalBrakeDurationMs")] = (
        pydantic.Field()
    )
    """
    Total breaking time in milliseconds.
    """

    total_brake_event_count: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="totalBrakeEventCount")
    ] = pydantic.Field(default=None)
    """
    Total number of brake events.
    """

    wear_free_brake_duration_ms: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="wearFreeBrakeDurationMs")
    ] = pydantic.Field(default=None)
    """
    Time spent ware-free breaking in milliseconds.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
