# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .vehicle_stats_fault_codes_value_obdii_diagnostic_trouble_codes import (
    VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes,
)


class VehicleStatsFaultCodesValueObdii(UniversalBaseModel):
    """
    Vehicle fault codes for passenger vehicles.
    """

    check_engine_light_is_on: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="checkEngineLightIsOn")
    ] = pydantic.Field(default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for any faults).
    """

    diagnostic_trouble_codes: typing_extensions.Annotated[
        typing.Optional[typing.List[VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes]],
        FieldMetadata(alias="diagnosticTroubleCodes"),
    ] = pydantic.Field(default=None)
    """
    Diagnostic trouble codes for passenger vehicles.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
