# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .goa_attribute_tiny_response_body import GoaAttributeTinyResponseBody
from .goa_tag_tiny_response_response_body import GoaTagTinyResponseResponseBody
from .safety_event_v_2_asset_object_response_body_type import SafetyEventV2AssetObjectResponseBodyType


class SafetyEventV2AssetObjectResponseBody(UniversalBaseModel):
    """
    Asset that the safety event is tied to.
    """

    attributes: typing.Optional[typing.List[GoaAttributeTinyResponseBody]] = pydantic.Field(default=None)
    """
    Attributes for the asset associated with the safety event. Only returns when `includeAsset` is set to `true`.
    """

    external_ids: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, str]], FieldMetadata(alias="externalIds")
    ] = pydantic.Field(default=None)
    """
    A map of external ids
    """

    id: str = pydantic.Field()
    """
    Unique ID for the asset object that is reporting the safety event.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name for the asset object that is reporting the safety event. Only returns when `includeAsset` is set to `true`.
    """

    tags: typing.Optional[typing.List[GoaTagTinyResponseResponseBody]] = pydantic.Field(default=None)
    """
    Tags for the asset associated with the safety event. Only returns when `includeAsset` is set to `true`.
    """

    type: typing.Optional[SafetyEventV2AssetObjectResponseBodyType] = pydantic.Field(default=None)
    """
    Type for the asset object that is reporting the location. Only returns when `includeAsset` is set to `true`.  Valid values: `uncategorized`, `trailer`, `equipment`, `unpowered`, `vehicle`
    """

    vin: typing.Optional[str] = pydantic.Field(default=None)
    """
    VIN for the asset object. Only returns when `includeAsset` is set to `true`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
