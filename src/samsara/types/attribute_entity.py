# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .attribute_entity_external_ids import AttributeEntityExternalIds
from .attribute_value_tiny import AttributeValueTiny


class AttributeEntity(UniversalBaseModel):
    entity_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="entityId")] = None
    external_ids: typing_extensions.Annotated[
        typing.Optional[AttributeEntityExternalIds], FieldMetadata(alias="externalIds")
    ] = pydantic.Field(default=None)
    """
    The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
    """

    name: typing.Optional[str] = None
    number_values: typing_extensions.Annotated[
        typing.Optional[typing.List[float]], FieldMetadata(alias="numberValues")
    ] = pydantic.Field(default=None)
    """
    Number values that are associated with this attribute.
    """

    string_values: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="stringValues")
    ] = pydantic.Field(default=None)
    """
    String values that are associated with this attribute.
    """

    values: typing.Optional[typing.List[AttributeValueTiny]] = pydantic.Field(default=None)
    """
    Representation of values that includes ids.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
