# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .form_submission_pdf_export_response_object_response_body_job_status import (
    FormSubmissionPdfExportResponseObjectResponseBodyJobStatus,
)


class FormSubmissionPdfExportResponseObjectResponseBody(UniversalBaseModel):
    """
    Form Submission PDF export response object.
    """

    completed_at_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="completedAtTime")
    ] = pydantic.Field(default=None)
    """
    Time when the PDF export job was completed. Included if 'jobStatus' is 'done'. UTC timestamp in RFC 3339 format.
    """

    error_message: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="errorMessage")] = (
        pydantic.Field(default=None)
    )
    """
    An error message for failed PDF export jobs. Included if 'jobStatus' is 'failed'.
    """

    expires_at_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="expiresAtTime")] = pydantic.Field()
    """
    Time when the PDF export job expires. After expiration, GET requests for this job will fail and clients must create a new one with another POST request. UTC timestamp in RFC 3339 format.
    """

    id: str = pydantic.Field()
    """
    ID of the form submission being exported.
    """

    job_status: typing_extensions.Annotated[
        FormSubmissionPdfExportResponseObjectResponseBodyJobStatus, FieldMetadata(alias="jobStatus")
    ] = pydantic.Field()
    """
    Status of the PDF export job.  Valid values: `unknown`, `pending`, `done`, `failed`
    """

    pdf_id: typing_extensions.Annotated[str, FieldMetadata(alias="pdfId")] = pydantic.Field()
    """
    Unique ID for the PDF export that is created.
    """

    pdf_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pdfUrl")] = pydantic.Field(
        default=None
    )
    """
    URL to download the PDF file. Expires at time specified in 'pdfUrlExpiresAtTime'. Included if 'jobStatus' is 'done'.
    """

    pdf_url_expires_at_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="pdfUrlExpiresAtTime")
    ] = pydantic.Field(default=None)
    """
    Time when the PDF export's 'pdfUrl' expires. After expiration, clients can retrieve a fresh url with another GET request. UTC timestamp in RFC 3339 format.
    """

    requested_at_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="requestedAtTime")] = (
        pydantic.Field()
    )
    """
    Time when the PDF export POST request was made. UTC timestamp in RFC 3339 format.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
