# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .goa_tag_tiny_response_request_body import GoaTagTinyResponseRequestBody
from .tiny_asset_object_request_body import TinyAssetObjectRequestBody
from .tiny_driver_object_request_body import TinyDriverObjectRequestBody
from .tiny_widget_object_request_body import TinyWidgetObjectRequestBody


class ScopeObjectRequestBody(UniversalBaseModel):
    """
    What the triggers are scoped to. These are the objects this alert applies to.
    """

    all_: typing_extensions.Annotated[bool, FieldMetadata(alias="all")] = pydantic.Field()
    """
    Whether it applies to all applicable objects.
    """

    assets: typing.Optional[typing.List[TinyAssetObjectRequestBody]] = pydantic.Field(default=None)
    """
    The assets these triggers are scoped to.
    """

    drivers: typing.Optional[typing.List[TinyDriverObjectRequestBody]] = pydantic.Field(default=None)
    """
    The drivers these triggers are scoped to.
    """

    tags: typing.Optional[typing.List[GoaTagTinyResponseRequestBody]] = pydantic.Field(default=None)
    """
    The tags these triggers are scoped to.
    """

    widgets: typing.Optional[typing.List[TinyWidgetObjectRequestBody]] = pydantic.Field(default=None)
    """
    The widgets these triggers are scoped to.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
