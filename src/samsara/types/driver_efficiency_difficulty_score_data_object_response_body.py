# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class DriverEfficiencyDifficultyScoreDataObjectResponseBody(UniversalBaseModel):
    """
    Difficulty score won't be available if there is no data to compute it against.
    """

    overall_score: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="overallScore")] = (
        pydantic.Field(default=None)
    )
    """
    Represents the overall difficulty score. It has scores from 1 to 5.
    """

    topography_score: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="topographyScore")] = (
        pydantic.Field(default=None)
    )
    """
    Represents the topography difficulty score. It has scores from 1 to 5.
    """

    vehicle_weight_score: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="vehicleWeightScore")
    ] = pydantic.Field(default=None)
    """
     Represents the average vehicle weight score. It has scores from 1 to 5.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
