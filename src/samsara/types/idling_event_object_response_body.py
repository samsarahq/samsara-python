# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .fuel_cost_object_response_body import FuelCostObjectResponseBody
from .gaseous_fuel_cost_object_response_body import GaseousFuelCostObjectResponseBody
from .idling_event_object_response_body_address_type import IdlingEventObjectResponseBodyAddressType


class IdlingEventObjectResponseBody(UniversalBaseModel):
    """
    An idling event object.
    """

    address_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="addressId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the geofence address of the idling location, if applicable. It will be the address at the time of idling.
    """

    address_type: typing_extensions.Annotated[
        typing.Optional[IdlingEventObjectResponseBodyAddressType], FieldMetadata(alias="addressType")
    ] = pydantic.Field(default=None)
    """
    The type of the geofence address of the idling location, if applicable.  Valid values: `agricultureSource`, `alertsOnly`, `industrialSite`, `riskZone`, `shortHaul`, `undefined`, `workforceSite`, `yard`
    """

    air_temperature_millicelsius: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="airTemperatureMillicelsius")
    ] = pydantic.Field(default=None)
    """
    The air temperature in millicelsius during the idling event. Value is returned only when it is known.
    """

    asset_id: typing_extensions.Annotated[int, FieldMetadata(alias="assetId")] = pydantic.Field()
    """
    Samsara ID of the asset assigned to the event. Returns vehicle ID at this time.
    """

    duration_milliseconds: typing_extensions.Annotated[int, FieldMetadata(alias="durationMilliseconds")] = (
        pydantic.Field()
    )
    """
    The duration of the idling event in milliseconds.
    """

    event_uuid: typing_extensions.Annotated[str, FieldMetadata(alias="eventUuid")] = pydantic.Field()
    """
    Universally unique identifier of the idling event.
    """

    fuel_consumed_milliliters: typing_extensions.Annotated[float, FieldMetadata(alias="fuelConsumedMilliliters")] = (
        pydantic.Field()
    )
    """
    The amount of fuel consumed in milliliters during the idling event.
    """

    fuel_cost: typing_extensions.Annotated[FuelCostObjectResponseBody, FieldMetadata(alias="fuelCost")]
    gaseous_fuel_consumed_grams: typing_extensions.Annotated[float, FieldMetadata(alias="gaseousFuelConsumedGrams")] = (
        pydantic.Field()
    )
    """
    The amount of gaseous fuel consumed in grams during the idling event.
    """

    gaseous_fuel_cost: typing_extensions.Annotated[
        GaseousFuelCostObjectResponseBody, FieldMetadata(alias="gaseousFuelCost")
    ]
    operator_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="operatorId")] = pydantic.Field(
        default=None
    )
    """
    Samsara ID of the operator assigned the event. Returns driver ID at this time. Value is returned when the driver is assigned to the vehicle.
    """

    pto_state: typing_extensions.Annotated[typing.Literal["active, inactive"], FieldMetadata(alias="ptoState")] = (
        pydantic.Field(default="active, inactive")
    )
    """
    The PTO (Power Take-Off) state during the idling event.  Valid values: `active, inactive`
    """

    start_time: typing_extensions.Annotated[str, FieldMetadata(alias="startTime")] = pydantic.Field()
    """
    The start time of the idling event in RFC 3339 format.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
