# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .asset_data_input import AssetDataInput


class AssetDataOutput(UniversalBaseModel):
    data_group: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataGroup")] = pydantic.Field(
        default=None
    )
    """
    Name of the data group that the data output is associated with
    """

    data_input: typing_extensions.Annotated[typing.Optional[AssetDataInput], FieldMetadata(alias="dataInput")] = None
    device_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="deviceId")] = pydantic.Field(
        default=None
    )
    """
    ID of the device that the data output is configured on
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the data output
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the data output
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
