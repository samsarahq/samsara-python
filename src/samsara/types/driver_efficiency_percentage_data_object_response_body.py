# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class DriverEfficiencyPercentageDataObjectResponseBody(UniversalBaseModel):
    """
    Driver Efficiency percentage data. This object is returned when the “percentage” format is specified in “dataFormats”.
    """

    anticipation_percentage: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="anticipationPercentage")
    ] = pydantic.Field(default=None)
    """
    Percentage of time a driver is in quickly breaking events vs total breaking events.
    """

    coasting_percentage: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="coastingPercentage")
    ] = pydantic.Field(default=None)
    """
    Percentage of time a driver is in coasting.
    """

    cruise_control_percentage: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="cruiseControlPercentage")
    ] = pydantic.Field(default=None)
    """
    Percentage of time a vehicle is in cruise control.
    """

    green_band_percentage: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="greenBandPercentage")
    ] = pydantic.Field(default=None)
    """
    Percentage of time a driver is driving within the green band.
    """

    high_grade_road_driving_percentage: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="highGradeRoadDrivingPercentage")
    ] = pydantic.Field(default=None)
    """
    Percentage of time a driver is driving on high-grade road.
    """

    high_torque_percentage: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="highTorquePercentage")
    ] = pydantic.Field(default=None)
    """
    Percentage of time a driver is driving in high torque.
    """

    idling_percentage: typing_extensions.Annotated[float, FieldMetadata(alias="idlingPercentage")] = pydantic.Field()
    """
    Percentage of time a driver is idling.
    """

    over_speed_percentage: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="overSpeedPercentage")
    ] = pydantic.Field(default=None)
    """
    Percentage of time a driver is in over-speeding.
    """

    wear_free_brake_percentage: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="wearFreeBrakePercentage")
    ] = pydantic.Field(default=None)
    """
    Percentage of time a driver is in wear-free breaking.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
