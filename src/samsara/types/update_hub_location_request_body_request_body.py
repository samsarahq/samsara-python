# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .hub_location_service_window_input_request_body import HubLocationServiceWindowInputRequestBody


class UpdateHubLocationRequestBodyRequestBody(UniversalBaseModel):
    """
    Request body for updating a hub location
    """

    address: typing.Optional[str] = pydantic.Field(default=None)
    """
    The physical address of the location
    """

    customer_location_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="customerLocationId")
    ] = pydantic.Field(default=None)
    """
    The customer-provided identifier for the location
    """

    driver_instructions: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="driverInstructions")
    ] = pydantic.Field(default=None)
    """
    Instructions for the driver
    """

    is_depot: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isDepot")] = pydantic.Field(
        default=None
    )
    """
    Indicates if the location is a depot
    """

    latitude: typing.Optional[float] = pydantic.Field(default=None)
    """
    Latitude coordinate of the location
    """

    longitude: typing.Optional[float] = pydantic.Field(default=None)
    """
    Longitude coordinate of the location
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the location
    """

    planner_notes: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="plannerNotes")] = (
        pydantic.Field(default=None)
    )
    """
    Notes for the planner
    """

    service_time_seconds: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="serviceTimeSeconds")
    ] = pydantic.Field(default=None)
    """
    Estimated service time at this location in seconds
    """

    service_windows: typing_extensions.Annotated[
        typing.Optional[typing.List[HubLocationServiceWindowInputRequestBody]], FieldMetadata(alias="serviceWindows")
    ] = pydantic.Field(default=None)
    """
    An array of time windows during which service can be performed at this location
    """

    skills_required: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="skillsRequired")
    ] = pydantic.Field(default=None)
    """
    An array of skill IDs required for service at this location
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
