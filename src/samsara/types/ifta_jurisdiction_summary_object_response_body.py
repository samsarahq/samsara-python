# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class IftaJurisdictionSummaryObjectResponseBody(UniversalBaseModel):
    """
    A summary of this jurisdiction's IFTA data.
    """

    jurisdiction: str = pydantic.Field()
    """
    Jurisdiction code.
    """

    tax_paid_liters: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="taxPaidLiters")] = (
        pydantic.Field(default=None)
    )
    """
    Liters purchased for all qualified vehicles.
    """

    taxable_meters: typing_extensions.Annotated[float, FieldMetadata(alias="taxableMeters")] = pydantic.Field()
    """
    Distance in meters traveled on public roads in an IFTA jurisdiction.
    """

    total_meters: typing_extensions.Annotated[float, FieldMetadata(alias="totalMeters")] = pydantic.Field()
    """
    Total meters driven in this jurisdiction, taxable and non-taxable.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
