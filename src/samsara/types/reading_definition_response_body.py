# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .enum_value_response_body import EnumValueResponseBody
from .reading_type_response_body import ReadingTypeResponseBody


class ReadingDefinitionResponseBody(UniversalBaseModel):
    """
    Definition of a reading.
    """

    category: str = pydantic.Field()
    """
    The category enumeration that this reading belongs to.
    """

    description: str = pydantic.Field()
    """
    The human readable description for this reading. Translated to English.
    """

    entity_type: typing_extensions.Annotated[str, FieldMetadata(alias="entityType")] = pydantic.Field()
    """
    Entity type of this reading.
    """

    enum_values: typing_extensions.Annotated[
        typing.Optional[typing.List[EnumValueResponseBody]], FieldMetadata(alias="enumValues")
    ] = pydantic.Field(default=None)
    """
    Array of enumeration values
    """

    label: str = pydantic.Field()
    """
    The label for this reading that is suitable to show to a user. Translated to English.
    """

    reading_id: typing_extensions.Annotated[str, FieldMetadata(alias="readingId")] = pydantic.Field()
    """
    The ID of the reading used to fetch time series data in other endpoints.
    """

    type: ReadingTypeResponseBody

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
