# This file was auto-generated by Fern from our API Definition.

import os
import typing

import httpx
from .addresses.client import AddressesClient, AsyncAddressesClient
from .alerts.client import AlertsClient, AsyncAlertsClient
from .assets.client import AssetsClient, AsyncAssetsClient
from .attributes.client import AsyncAttributesClient, AttributesClient
from .auth.client import AsyncAuthClient, AuthClient
from .cameras.client import AsyncCamerasClient, CamerasClient
from .carrier_proposed_assignments.client import AsyncCarrierProposedAssignmentsClient, CarrierProposedAssignmentsClient
from .coaching.client import AsyncCoachingClient, CoachingClient
from .contacts.client import AsyncContactsClient, ContactsClient
from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .defect_types.client import AsyncDefectTypesClient, DefectTypesClient
from .defects.client import AsyncDefectsClient, DefectsClient
from .devices.client import AsyncDevicesClient, DevicesClient
from .document_types.client import AsyncDocumentTypesClient, DocumentTypesClient
from .documents.client import AsyncDocumentsClient, DocumentsClient
from .driver_trailer_assignments.client import AsyncDriverTrailerAssignmentsClient, DriverTrailerAssignmentsClient
from .driver_vehicle_assignments.client import AsyncDriverVehicleAssignmentsClient, DriverVehicleAssignmentsClient
from .drivers.client import AsyncDriversClient, DriversClient
from .dvirs.client import AsyncDvirsClient, DvirsClient
from .environment import SamsaraEnvironment
from .equipment.client import AsyncEquipmentClient, EquipmentClient
from .form_submissions.client import AsyncFormSubmissionsClient, FormSubmissionsClient
from .forms.client import AsyncFormsClient, FormsClient
from .fuel_purchases.client import AsyncFuelPurchasesClient, FuelPurchasesClient
from .gateways.client import AsyncGatewaysClient, GatewaysClient
from .hos.client import AsyncHosClient, HosClient
from .idling.client import AsyncIdlingClient, IdlingClient
from .ifta.client import AsyncIftaClient, IftaClient
from .inputs.client import AsyncInputsClient, InputsClient
from .issues.client import AsyncIssuesClient, IssuesClient
from .legacy.client import AsyncLegacyClient, LegacyClient
from .live_shares.client import AsyncLiveSharesClient, LiveSharesClient
from .maintenance.client import AsyncMaintenanceClient, MaintenanceClient
from .me.client import AsyncMeClient, MeClient
from .readings.client import AsyncReadingsClient, ReadingsClient
from .reports.client import AsyncReportsClient, ReportsClient
from .routes.client import AsyncRoutesClient, RoutesClient
from .safety_events.client import AsyncSafetyEventsClient, SafetyEventsClient
from .settings.client import AsyncSettingsClient, SettingsClient
from .speeding_intervals.client import AsyncSpeedingIntervalsClient, SpeedingIntervalsClient
from .tachograph.client import AsyncTachographClient, TachographClient
from .tags.client import AsyncTagsClient, TagsClient
from .trailers.client import AsyncTrailersClient, TrailersClient
from .training_assignments.client import AsyncTrainingAssignmentsClient, TrainingAssignmentsClient
from .training_courses.client import AsyncTrainingCoursesClient, TrainingCoursesClient
from .trips.client import AsyncTripsClient, TripsClient
from .user_roles.client import AsyncUserRolesClient, UserRolesClient
from .users.client import AsyncUsersClient, UsersClient
from .v_1_messages.client import AsyncV1MessagesClient, V1MessagesClient
from .vehicles.client import AsyncVehiclesClient, VehiclesClient
from .webhooks.client import AsyncWebhooksClient, WebhooksClient


class Samsara:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SamsaraEnvironment
        The environment to use for requests from the client. from .environment import SamsaraEnvironment



        Defaults to SamsaraEnvironment.PRODUCTION_API



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from samsara import Samsara

    client = Samsara(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SamsaraEnvironment = SamsaraEnvironment.PRODUCTION_API,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("SAMSARA_API_KEY"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        if token is None:
            raise ApiError(body="The client must be instantiated be either passing in token or setting SAMSARA_API_KEY")
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.addresses = AddressesClient(client_wrapper=self._client_wrapper)
        self.assets = AssetsClient(client_wrapper=self._client_wrapper)
        self.inputs = InputsClient(client_wrapper=self._client_wrapper)
        self.attributes = AttributesClient(client_wrapper=self._client_wrapper)
        self.contacts = ContactsClient(client_wrapper=self._client_wrapper)
        self.defect_types = DefectTypesClient(client_wrapper=self._client_wrapper)
        self.defects = DefectsClient(client_wrapper=self._client_wrapper)
        self.devices = DevicesClient(client_wrapper=self._client_wrapper)
        self.driver_trailer_assignments = DriverTrailerAssignmentsClient(client_wrapper=self._client_wrapper)
        self.dvirs = DvirsClient(client_wrapper=self._client_wrapper)
        self.carrier_proposed_assignments = CarrierProposedAssignmentsClient(client_wrapper=self._client_wrapper)
        self.document_types = DocumentTypesClient(client_wrapper=self._client_wrapper)
        self.documents = DocumentsClient(client_wrapper=self._client_wrapper)
        self.driver_vehicle_assignments = DriverVehicleAssignmentsClient(client_wrapper=self._client_wrapper)
        self.drivers = DriversClient(client_wrapper=self._client_wrapper)
        self.equipment = EquipmentClient(client_wrapper=self._client_wrapper)
        self.hos = HosClient(client_wrapper=self._client_wrapper)
        self.routes = RoutesClient(client_wrapper=self._client_wrapper)
        self.safety_events = SafetyEventsClient(client_wrapper=self._client_wrapper)
        self.trailers = TrailersClient(client_wrapper=self._client_wrapper)
        self.vehicles = VehiclesClient(client_wrapper=self._client_wrapper)
        self.legacy = LegacyClient(client_wrapper=self._client_wrapper)
        self.form_submissions = FormSubmissionsClient(client_wrapper=self._client_wrapper)
        self.forms = FormsClient(client_wrapper=self._client_wrapper)
        self.fuel_purchases = FuelPurchasesClient(client_wrapper=self._client_wrapper)
        self.gateways = GatewaysClient(client_wrapper=self._client_wrapper)
        self.idling = IdlingClient(client_wrapper=self._client_wrapper)
        self.issues = IssuesClient(client_wrapper=self._client_wrapper)
        self.live_shares = LiveSharesClient(client_wrapper=self._client_wrapper)
        self.me = MeClient(client_wrapper=self._client_wrapper)
        self.readings = ReadingsClient(client_wrapper=self._client_wrapper)
        self.speeding_intervals = SpeedingIntervalsClient(client_wrapper=self._client_wrapper)
        self.tags = TagsClient(client_wrapper=self._client_wrapper)
        self.training_assignments = TrainingAssignmentsClient(client_wrapper=self._client_wrapper)
        self.training_courses = TrainingCoursesClient(client_wrapper=self._client_wrapper)
        self.trips = TripsClient(client_wrapper=self._client_wrapper)
        self.user_roles = UserRolesClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.v_1_messages = V1MessagesClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)
        self.alerts = AlertsClient(client_wrapper=self._client_wrapper)
        self.auth = AuthClient(client_wrapper=self._client_wrapper)
        self.cameras = CamerasClient(client_wrapper=self._client_wrapper)
        self.coaching = CoachingClient(client_wrapper=self._client_wrapper)
        self.ifta = IftaClient(client_wrapper=self._client_wrapper)
        self.maintenance = MaintenanceClient(client_wrapper=self._client_wrapper)
        self.reports = ReportsClient(client_wrapper=self._client_wrapper)
        self.settings = SettingsClient(client_wrapper=self._client_wrapper)
        self.tachograph = TachographClient(client_wrapper=self._client_wrapper)


class AsyncSamsara:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SamsaraEnvironment
        The environment to use for requests from the client. from .environment import SamsaraEnvironment



        Defaults to SamsaraEnvironment.PRODUCTION_API



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from samsara import AsyncSamsara

    client = AsyncSamsara(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SamsaraEnvironment = SamsaraEnvironment.PRODUCTION_API,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("SAMSARA_API_KEY"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        if token is None:
            raise ApiError(body="The client must be instantiated be either passing in token or setting SAMSARA_API_KEY")
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.addresses = AsyncAddressesClient(client_wrapper=self._client_wrapper)
        self.assets = AsyncAssetsClient(client_wrapper=self._client_wrapper)
        self.inputs = AsyncInputsClient(client_wrapper=self._client_wrapper)
        self.attributes = AsyncAttributesClient(client_wrapper=self._client_wrapper)
        self.contacts = AsyncContactsClient(client_wrapper=self._client_wrapper)
        self.defect_types = AsyncDefectTypesClient(client_wrapper=self._client_wrapper)
        self.defects = AsyncDefectsClient(client_wrapper=self._client_wrapper)
        self.devices = AsyncDevicesClient(client_wrapper=self._client_wrapper)
        self.driver_trailer_assignments = AsyncDriverTrailerAssignmentsClient(client_wrapper=self._client_wrapper)
        self.dvirs = AsyncDvirsClient(client_wrapper=self._client_wrapper)
        self.carrier_proposed_assignments = AsyncCarrierProposedAssignmentsClient(client_wrapper=self._client_wrapper)
        self.document_types = AsyncDocumentTypesClient(client_wrapper=self._client_wrapper)
        self.documents = AsyncDocumentsClient(client_wrapper=self._client_wrapper)
        self.driver_vehicle_assignments = AsyncDriverVehicleAssignmentsClient(client_wrapper=self._client_wrapper)
        self.drivers = AsyncDriversClient(client_wrapper=self._client_wrapper)
        self.equipment = AsyncEquipmentClient(client_wrapper=self._client_wrapper)
        self.hos = AsyncHosClient(client_wrapper=self._client_wrapper)
        self.routes = AsyncRoutesClient(client_wrapper=self._client_wrapper)
        self.safety_events = AsyncSafetyEventsClient(client_wrapper=self._client_wrapper)
        self.trailers = AsyncTrailersClient(client_wrapper=self._client_wrapper)
        self.vehicles = AsyncVehiclesClient(client_wrapper=self._client_wrapper)
        self.legacy = AsyncLegacyClient(client_wrapper=self._client_wrapper)
        self.form_submissions = AsyncFormSubmissionsClient(client_wrapper=self._client_wrapper)
        self.forms = AsyncFormsClient(client_wrapper=self._client_wrapper)
        self.fuel_purchases = AsyncFuelPurchasesClient(client_wrapper=self._client_wrapper)
        self.gateways = AsyncGatewaysClient(client_wrapper=self._client_wrapper)
        self.idling = AsyncIdlingClient(client_wrapper=self._client_wrapper)
        self.issues = AsyncIssuesClient(client_wrapper=self._client_wrapper)
        self.live_shares = AsyncLiveSharesClient(client_wrapper=self._client_wrapper)
        self.me = AsyncMeClient(client_wrapper=self._client_wrapper)
        self.readings = AsyncReadingsClient(client_wrapper=self._client_wrapper)
        self.speeding_intervals = AsyncSpeedingIntervalsClient(client_wrapper=self._client_wrapper)
        self.tags = AsyncTagsClient(client_wrapper=self._client_wrapper)
        self.training_assignments = AsyncTrainingAssignmentsClient(client_wrapper=self._client_wrapper)
        self.training_courses = AsyncTrainingCoursesClient(client_wrapper=self._client_wrapper)
        self.trips = AsyncTripsClient(client_wrapper=self._client_wrapper)
        self.user_roles = AsyncUserRolesClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.v_1_messages = AsyncV1MessagesClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)
        self.alerts = AsyncAlertsClient(client_wrapper=self._client_wrapper)
        self.auth = AsyncAuthClient(client_wrapper=self._client_wrapper)
        self.cameras = AsyncCamerasClient(client_wrapper=self._client_wrapper)
        self.coaching = AsyncCoachingClient(client_wrapper=self._client_wrapper)
        self.ifta = AsyncIftaClient(client_wrapper=self._client_wrapper)
        self.maintenance = AsyncMaintenanceClient(client_wrapper=self._client_wrapper)
        self.reports = AsyncReportsClient(client_wrapper=self._client_wrapper)
        self.settings = AsyncSettingsClient(client_wrapper=self._client_wrapper)
        self.tachograph = AsyncTachographClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SamsaraEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
