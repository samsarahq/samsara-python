# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.action_object_request_body import ActionObjectRequestBody
from ..types.alerts_get_configurations_response_body import AlertsGetConfigurationsResponseBody
from ..types.alerts_get_incidents_response_body import AlertsGetIncidentsResponseBody
from ..types.alerts_patch_configurations_response_body import AlertsPatchConfigurationsResponseBody
from ..types.alerts_post_configurations_response_body import AlertsPostConfigurationsResponseBody
from ..types.operational_settings_object_request_body import OperationalSettingsObjectRequestBody
from ..types.scope_object_request_body import ScopeObjectRequestBody
from ..types.workflow_trigger_object_request_body import WorkflowTriggerObjectRequestBody
from .raw_client import AsyncRawAlertsClient, RawAlertsClient
from .types.get_configurations_request_status import GetConfigurationsRequestStatus

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AlertsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAlertsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAlertsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAlertsClient
        """
        return self._raw_client

    def get_configurations(
        self,
        *,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        status: typing.Optional[GetConfigurationsRequestStatus] = None,
        after: typing.Optional[str] = None,
        include_external_ids: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsGetConfigurationsResponseBody:
        """
        Get specified Alert Configurations.

        The following trigger types are API enabled and will show up in the results:
        Vehicle Speed
        Ambient Temperature
        Fuel Level (Percentage)
        Vehicle DEF Level (Percentage)
        Vehicle Battery
        Gateway Unplugged
        Dashcam Disconnected
        Camera Connector Disconnected
        Asset starts moving
        Inside Geofence
        Outside Geofence
        Unassigned Driving
        Driver HOS Violation
        Vehicle Engine Idle
        Asset Engine On
        Asset Engine Off
        Harsh Event
        Scheduled Maintenance
        Scheduled Maintenance by Odometer
        Scheduled Maintenance by Engine Hours
        Out of Route
        GPS Signal Loss
        Cell Signal Loss
        Fault Code
        Tire Faults
        Gateway Disconnected
        Panic Button
        Tampering Detected
        Asset Reading
        If vehicle is severely speeding (as defined by your organization)
        DVIR Submitted for Asset
        Driver Document Submitted
        Driver App Sign In
        Driver App Sign Out
        Geofence Entry
        Geofence Exit
        Route Stop ETA Alert
        Driver Recorded
        Sudden Fuel Level Rise
        Sudden Fuel Level Drop
        Scheduled Date And Time
        Training Assignment Due Soon
        Training Assignment Past Due

         <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter by the IDs. Returns all if no ids are provided.

        status : typing.Optional[GetConfigurationsRequestStatus]
            The status of the alert configuration.  Valid values: `all`, `enabled`, `disabled`

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsGetConfigurationsResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.alerts.get_configurations(
            status="all",
            after="after",
            include_external_ids=True,
        )
        """
        _response = self._raw_client.get_configurations(
            ids=ids,
            status=status,
            after=after,
            include_external_ids=include_external_ids,
            request_options=request_options,
        )
        return _response.data

    def post_configurations(
        self,
        *,
        actions: typing.Sequence[ActionObjectRequestBody],
        is_enabled: bool,
        name: str,
        scope: ScopeObjectRequestBody,
        triggers: typing.Sequence[WorkflowTriggerObjectRequestBody],
        external_ids: typing.Optional[typing.Dict[str, str]] = OMIT,
        operational_settings: typing.Optional[OperationalSettingsObjectRequestBody] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsPostConfigurationsResponseBody:
        """
        Creates an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        actions : typing.Sequence[ActionObjectRequestBody]
            An array of actions.

        is_enabled : bool
            Whether the alert is enabled or not.

        name : str
            The custom name of the configuration.

        scope : ScopeObjectRequestBody

        triggers : typing.Sequence[WorkflowTriggerObjectRequestBody]
            An array of triggers.

        external_ids : typing.Optional[typing.Dict[str, str]]
            A map of external ids

        operational_settings : typing.Optional[OperationalSettingsObjectRequestBody]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsPostConfigurationsResponseBody
            OK response.

        Examples
        --------
        from samsara import (
            ActionObjectRequestBody,
            Samsara,
            ScopeObjectRequestBody,
            WorkflowTriggerObjectRequestBody,
        )

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.alerts.post_configurations(
            actions=[
                ActionObjectRequestBody(
                    action_type_id=1,
                )
            ],
            is_enabled=True,
            name="My Harsh Event Alert",
            scope=ScopeObjectRequestBody(
                all_=True,
            ),
            triggers=[
                WorkflowTriggerObjectRequestBody(
                    trigger_type_id=1000,
                )
            ],
        )
        """
        _response = self._raw_client.post_configurations(
            actions=actions,
            is_enabled=is_enabled,
            name=name,
            scope=scope,
            triggers=triggers,
            external_ids=external_ids,
            operational_settings=operational_settings,
            request_options=request_options,
        )
        return _response.data

    def delete_configurations(self, *, id: str, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unqiue Samsara id of the alert configuration.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.alerts.delete_configurations(
            id="id",
        )
        """
        _response = self._raw_client.delete_configurations(id=id, request_options=request_options)
        return _response.data

    def patch_configurations(
        self,
        *,
        id: str,
        actions: typing.Optional[typing.Sequence[ActionObjectRequestBody]] = OMIT,
        external_ids: typing.Optional[typing.Dict[str, str]] = OMIT,
        is_enabled: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        operational_settings: typing.Optional[OperationalSettingsObjectRequestBody] = OMIT,
        scope: typing.Optional[ScopeObjectRequestBody] = OMIT,
        triggers: typing.Optional[typing.Sequence[WorkflowTriggerObjectRequestBody]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsPatchConfigurationsResponseBody:
        """
        Updates an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unqiue Samsara id of the alert configuration.

        actions : typing.Optional[typing.Sequence[ActionObjectRequestBody]]
            An array of actions.

        external_ids : typing.Optional[typing.Dict[str, str]]
            A map of external ids

        is_enabled : typing.Optional[bool]
            Whether the alert is enabled or not.

        name : typing.Optional[str]
            The custom name of the configuration.

        operational_settings : typing.Optional[OperationalSettingsObjectRequestBody]

        scope : typing.Optional[ScopeObjectRequestBody]

        triggers : typing.Optional[typing.Sequence[WorkflowTriggerObjectRequestBody]]
            An array of triggers.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsPatchConfigurationsResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.alerts.patch_configurations(
            id="e1c5dffc-c7b7-47b0-a778-6a65de638abf",
        )
        """
        _response = self._raw_client.patch_configurations(
            id=id,
            actions=actions,
            external_ids=external_ids,
            is_enabled=is_enabled,
            name=name,
            operational_settings=operational_settings,
            scope=scope,
            triggers=triggers,
            request_options=request_options,
        )
        return _response.data

    def get_incidents(
        self,
        *,
        start_time: str,
        configuration_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        end_time: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsGetIncidentsResponseBody:
        """
        Get Alert Incidents for specific Alert Configurations over a specified period of time.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        start_time : str
            Required RFC 3339 timestamp that indicates when to begin receiving data. This will be based on updatedAtTime.

        configuration_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Required array of alert configuration ids to return incident data for.

        end_time : typing.Optional[str]
            Optional RFC 3339 timestamp to stop receiving data. Defaults to now if not provided. This will be based on updatedAtTime.

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsGetIncidentsResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.alerts.get_incidents(
            start_time="startTime",
        )
        """
        _response = self._raw_client.get_incidents(
            start_time=start_time,
            configuration_ids=configuration_ids,
            end_time=end_time,
            after=after,
            request_options=request_options,
        )
        return _response.data


class AsyncAlertsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAlertsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAlertsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAlertsClient
        """
        return self._raw_client

    async def get_configurations(
        self,
        *,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        status: typing.Optional[GetConfigurationsRequestStatus] = None,
        after: typing.Optional[str] = None,
        include_external_ids: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsGetConfigurationsResponseBody:
        """
        Get specified Alert Configurations.

        The following trigger types are API enabled and will show up in the results:
        Vehicle Speed
        Ambient Temperature
        Fuel Level (Percentage)
        Vehicle DEF Level (Percentage)
        Vehicle Battery
        Gateway Unplugged
        Dashcam Disconnected
        Camera Connector Disconnected
        Asset starts moving
        Inside Geofence
        Outside Geofence
        Unassigned Driving
        Driver HOS Violation
        Vehicle Engine Idle
        Asset Engine On
        Asset Engine Off
        Harsh Event
        Scheduled Maintenance
        Scheduled Maintenance by Odometer
        Scheduled Maintenance by Engine Hours
        Out of Route
        GPS Signal Loss
        Cell Signal Loss
        Fault Code
        Tire Faults
        Gateway Disconnected
        Panic Button
        Tampering Detected
        Asset Reading
        If vehicle is severely speeding (as defined by your organization)
        DVIR Submitted for Asset
        Driver Document Submitted
        Driver App Sign In
        Driver App Sign Out
        Geofence Entry
        Geofence Exit
        Route Stop ETA Alert
        Driver Recorded
        Sudden Fuel Level Rise
        Sudden Fuel Level Drop
        Scheduled Date And Time
        Training Assignment Due Soon
        Training Assignment Past Due

         <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter by the IDs. Returns all if no ids are provided.

        status : typing.Optional[GetConfigurationsRequestStatus]
            The status of the alert configuration.  Valid values: `all`, `enabled`, `disabled`

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsGetConfigurationsResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.alerts.get_configurations(
                status="all",
                after="after",
                include_external_ids=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_configurations(
            ids=ids,
            status=status,
            after=after,
            include_external_ids=include_external_ids,
            request_options=request_options,
        )
        return _response.data

    async def post_configurations(
        self,
        *,
        actions: typing.Sequence[ActionObjectRequestBody],
        is_enabled: bool,
        name: str,
        scope: ScopeObjectRequestBody,
        triggers: typing.Sequence[WorkflowTriggerObjectRequestBody],
        external_ids: typing.Optional[typing.Dict[str, str]] = OMIT,
        operational_settings: typing.Optional[OperationalSettingsObjectRequestBody] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsPostConfigurationsResponseBody:
        """
        Creates an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        actions : typing.Sequence[ActionObjectRequestBody]
            An array of actions.

        is_enabled : bool
            Whether the alert is enabled or not.

        name : str
            The custom name of the configuration.

        scope : ScopeObjectRequestBody

        triggers : typing.Sequence[WorkflowTriggerObjectRequestBody]
            An array of triggers.

        external_ids : typing.Optional[typing.Dict[str, str]]
            A map of external ids

        operational_settings : typing.Optional[OperationalSettingsObjectRequestBody]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsPostConfigurationsResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import (
            ActionObjectRequestBody,
            AsyncSamsara,
            ScopeObjectRequestBody,
            WorkflowTriggerObjectRequestBody,
        )

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.alerts.post_configurations(
                actions=[
                    ActionObjectRequestBody(
                        action_type_id=1,
                    )
                ],
                is_enabled=True,
                name="My Harsh Event Alert",
                scope=ScopeObjectRequestBody(
                    all_=True,
                ),
                triggers=[
                    WorkflowTriggerObjectRequestBody(
                        trigger_type_id=1000,
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_configurations(
            actions=actions,
            is_enabled=is_enabled,
            name=name,
            scope=scope,
            triggers=triggers,
            external_ids=external_ids,
            operational_settings=operational_settings,
            request_options=request_options,
        )
        return _response.data

    async def delete_configurations(self, *, id: str, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unqiue Samsara id of the alert configuration.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.alerts.delete_configurations(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_configurations(id=id, request_options=request_options)
        return _response.data

    async def patch_configurations(
        self,
        *,
        id: str,
        actions: typing.Optional[typing.Sequence[ActionObjectRequestBody]] = OMIT,
        external_ids: typing.Optional[typing.Dict[str, str]] = OMIT,
        is_enabled: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        operational_settings: typing.Optional[OperationalSettingsObjectRequestBody] = OMIT,
        scope: typing.Optional[ScopeObjectRequestBody] = OMIT,
        triggers: typing.Optional[typing.Sequence[WorkflowTriggerObjectRequestBody]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsPatchConfigurationsResponseBody:
        """
        Updates an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unqiue Samsara id of the alert configuration.

        actions : typing.Optional[typing.Sequence[ActionObjectRequestBody]]
            An array of actions.

        external_ids : typing.Optional[typing.Dict[str, str]]
            A map of external ids

        is_enabled : typing.Optional[bool]
            Whether the alert is enabled or not.

        name : typing.Optional[str]
            The custom name of the configuration.

        operational_settings : typing.Optional[OperationalSettingsObjectRequestBody]

        scope : typing.Optional[ScopeObjectRequestBody]

        triggers : typing.Optional[typing.Sequence[WorkflowTriggerObjectRequestBody]]
            An array of triggers.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsPatchConfigurationsResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.alerts.patch_configurations(
                id="e1c5dffc-c7b7-47b0-a778-6a65de638abf",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch_configurations(
            id=id,
            actions=actions,
            external_ids=external_ids,
            is_enabled=is_enabled,
            name=name,
            operational_settings=operational_settings,
            scope=scope,
            triggers=triggers,
            request_options=request_options,
        )
        return _response.data

    async def get_incidents(
        self,
        *,
        start_time: str,
        configuration_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        end_time: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsGetIncidentsResponseBody:
        """
        Get Alert Incidents for specific Alert Configurations over a specified period of time.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        start_time : str
            Required RFC 3339 timestamp that indicates when to begin receiving data. This will be based on updatedAtTime.

        configuration_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Required array of alert configuration ids to return incident data for.

        end_time : typing.Optional[str]
            Optional RFC 3339 timestamp to stop receiving data. Defaults to now if not provided. This will be based on updatedAtTime.

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsGetIncidentsResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.alerts.get_incidents(
                start_time="startTime",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_incidents(
            start_time=start_time,
            configuration_ids=configuration_ids,
            end_time=end_time,
            after=after,
            request_options=request_options,
        )
        return _response.data
