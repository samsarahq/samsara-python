# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.pagination import AsyncPager, SyncPager
from ...core.request_options import RequestOptions
from ...types.coaching_sessions_response_response_body import CoachingSessionsResponseResponseBody
from .raw_client import AsyncRawSessionsClient, RawSessionsClient


class SessionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSessionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSessionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSessionsClient
        """
        return self._raw_client

    def stream(
        self,
        *,
        start_time: dt.datetime,
        driver_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        coach_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        session_statuses: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        include_coachable_events: typing.Optional[bool] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        include_external_ids: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[CoachingSessionsResponseResponseBody]:
        """
        This endpoint will return coaching sessions for your organization based on the time parameters passed in. Results are paginated by sessions. If you include an endTime, the endpoint will return data up until that point. If you don’t include an endTime, you can continue to poll the API real-time with the pagination cursor that gets returned on every call.

         <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Coaching** under the Coaching category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        start_time : dt.datetime
            Required RFC 3339 timestamp that indicates when to begin receiving data. Value is compared against `updatedAtTime`

        driver_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Optional string of comma separated driver IDs. If driver ID is present, sessions for the specified driver(s) will be returned.

        coach_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Optional string of comma separated user IDs. If coach ID is present, sessions for the specified coach(s) will be returned for either assignedCoach or completedCoach. If both driverId(s) and coachId(s) are present, sessions with specified driver(s) and coach(es) will be returned.

        session_statuses : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Optional string of comma separated statuses. Valid values:  “upcoming”, “completed”, “deleted”.

        include_coachable_events : typing.Optional[bool]
            Optional boolean to control whether behaviors will include coachableEvents in the response. Defaults to false.

        end_time : typing.Optional[dt.datetime]
            Optional RFC 3339 timestamp. If not provided then the endpoint behaves as an unending feed of changes. If endTime is set the same as startTime, the most recent data point before that time will be returned per asset. Value is compared against `updatedAtTime`

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[CoachingSessionsResponseResponseBody]
            OK response.

        Examples
        --------
        import datetime

        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        response = client.coaching.sessions.stream(
            start_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.stream(
            start_time=start_time,
            driver_ids=driver_ids,
            coach_ids=coach_ids,
            session_statuses=session_statuses,
            include_coachable_events=include_coachable_events,
            end_time=end_time,
            after=after,
            include_external_ids=include_external_ids,
            request_options=request_options,
        )


class AsyncSessionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSessionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSessionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSessionsClient
        """
        return self._raw_client

    async def stream(
        self,
        *,
        start_time: dt.datetime,
        driver_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        coach_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        session_statuses: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        include_coachable_events: typing.Optional[bool] = None,
        end_time: typing.Optional[dt.datetime] = None,
        after: typing.Optional[str] = None,
        include_external_ids: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[CoachingSessionsResponseResponseBody]:
        """
        This endpoint will return coaching sessions for your organization based on the time parameters passed in. Results are paginated by sessions. If you include an endTime, the endpoint will return data up until that point. If you don’t include an endTime, you can continue to poll the API real-time with the pagination cursor that gets returned on every call.

         <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Coaching** under the Coaching category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        start_time : dt.datetime
            Required RFC 3339 timestamp that indicates when to begin receiving data. Value is compared against `updatedAtTime`

        driver_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Optional string of comma separated driver IDs. If driver ID is present, sessions for the specified driver(s) will be returned.

        coach_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Optional string of comma separated user IDs. If coach ID is present, sessions for the specified coach(s) will be returned for either assignedCoach or completedCoach. If both driverId(s) and coachId(s) are present, sessions with specified driver(s) and coach(es) will be returned.

        session_statuses : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Optional string of comma separated statuses. Valid values:  “upcoming”, “completed”, “deleted”.

        include_coachable_events : typing.Optional[bool]
            Optional boolean to control whether behaviors will include coachableEvents in the response. Defaults to false.

        end_time : typing.Optional[dt.datetime]
            Optional RFC 3339 timestamp. If not provided then the endpoint behaves as an unending feed of changes. If endTime is set the same as startTime, the most recent data point before that time will be returned per asset. Value is compared against `updatedAtTime`

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[CoachingSessionsResponseResponseBody]
            OK response.

        Examples
        --------
        import asyncio
        import datetime

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.coaching.sessions.stream(
                start_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.stream(
            start_time=start_time,
            driver_ids=driver_ids,
            coach_ids=coach_ids,
            session_statuses=session_statuses,
            include_coachable_events=include_coachable_events,
            end_time=end_time,
            after=after,
            include_external_ids=include_external_ids,
            request_options=request_options,
        )
