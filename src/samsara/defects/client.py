# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..types.defect_response import DefectResponse
from ..types.defects_response import DefectsResponse
from ..types.defects_response_data_response_body import DefectsResponseDataResponseBody
from ..types.dvir_defect_get_defect_response_body import DvirDefectGetDefectResponseBody
from ..types.resolved_by import ResolvedBy
from .raw_client import AsyncRawDefectsClient, RawDefectsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DefectsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDefectsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDefectsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDefectsClient
        """
        return self._raw_client

    def stream(
        self,
        *,
        start_time: str,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        end_time: typing.Optional[str] = None,
        include_external_ids: typing.Optional[bool] = None,
        is_resolved: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[DefectsResponseDataResponseBody]:
        """
        Stream DVIR defects.

         <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Defects** under the Maintenance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        start_time : str
            Required RFC 3339 timestamp to begin the feed or history by `updatedAtTime` at `startTime`.

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            The limit for how many objects will be in the response. Default and max for this value is 200 objects.

        end_time : typing.Optional[str]
            Optional RFC 3339 timestamp. If not provided then the endpoint behaves as an unending feed of changes.

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        is_resolved : typing.Optional[bool]
            Boolean value for whether filter defects by resolved status.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[DefectsResponseDataResponseBody]
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        response = client.defects.stream(
            start_time="startTime",
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.stream(
            start_time=start_time,
            after=after,
            limit=limit,
            end_time=end_time,
            include_external_ids=include_external_ids,
            is_resolved=is_resolved,
            request_options=request_options,
        )

    def get(
        self,
        id: str,
        *,
        include_external_ids: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DvirDefectGetDefectResponseBody:
        """
        Get a single DVIR defect by ID.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Defects** under the Maintenance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unique ID of the DVIR defect.

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DvirDefectGetDefectResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.defects.get(
            id="id",
        )
        """
        _response = self._raw_client.get(id, include_external_ids=include_external_ids, request_options=request_options)
        return _response.data

    def history(
        self,
        *,
        start_time: str,
        end_time: str,
        limit: typing.Optional[int] = None,
        after: typing.Optional[str] = None,
        is_resolved: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DefectsResponse:
        """
        **Note: This is a legacy endpoint, consider using [this endpoint](https://developers.samsara.com/reference/streamdefects) instead. The endpoint will continue to function as documented.**

        Returns a list of DVIR defects in an organization, filtered by creation time. The maximum time period you can query for is 30 days.

         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        To use this endpoint, select **Read Defects** under the Maintenance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>

        Parameters
        ----------
        start_time : str
            A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*

        end_time : str
            An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*

        limit : typing.Optional[int]
            The limit for how many objects will be in the response. Default and max for this value is 512 objects.

        after : typing.Optional[str]
            If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        is_resolved : typing.Optional[bool]
            A filter on the data based on resolution status. Example: `isResolved=true`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DefectsResponse
            List of all DVIR defects in the organization

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.defects.history(
            start_time="startTime",
            end_time="endTime",
        )
        """
        _response = self._raw_client.history(
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            after=after,
            is_resolved=is_resolved,
            request_options=request_options,
        )
        return _response.data

    def update(
        self,
        id: str,
        *,
        is_resolved: typing.Optional[bool] = OMIT,
        mechanic_notes: typing.Optional[str] = OMIT,
        resolved_at_time: typing.Optional[str] = OMIT,
        resolved_by: typing.Optional[ResolvedBy] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DefectResponse:
        """
        Updates a given defect. Can be used to resolve a defect by marking its `isResolved` field to `true`.

         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        To use this endpoint, select **Write Defects** under the Maintenance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>

        Parameters
        ----------
        id : str
            ID of the defect.

        is_resolved : typing.Optional[bool]
            Resolves the defect. Must be `true`.

        mechanic_notes : typing.Optional[str]
            The mechanics notes on the defect.

        resolved_at_time : typing.Optional[str]
            Time when defect was resolved. Defaults to now if not provided. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.

        resolved_by : typing.Optional[ResolvedBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DefectResponse
            Return the modified defect entity

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.defects.update(
            id="id",
        )
        """
        _response = self._raw_client.update(
            id,
            is_resolved=is_resolved,
            mechanic_notes=mechanic_notes,
            resolved_at_time=resolved_at_time,
            resolved_by=resolved_by,
            request_options=request_options,
        )
        return _response.data


class AsyncDefectsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDefectsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDefectsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDefectsClient
        """
        return self._raw_client

    async def stream(
        self,
        *,
        start_time: str,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        end_time: typing.Optional[str] = None,
        include_external_ids: typing.Optional[bool] = None,
        is_resolved: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[DefectsResponseDataResponseBody]:
        """
        Stream DVIR defects.

         <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Defects** under the Maintenance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        start_time : str
            Required RFC 3339 timestamp to begin the feed or history by `updatedAtTime` at `startTime`.

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            The limit for how many objects will be in the response. Default and max for this value is 200 objects.

        end_time : typing.Optional[str]
            Optional RFC 3339 timestamp. If not provided then the endpoint behaves as an unending feed of changes.

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        is_resolved : typing.Optional[bool]
            Boolean value for whether filter defects by resolved status.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[DefectsResponseDataResponseBody]
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.defects.stream(
                start_time="startTime",
            )
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.stream(
            start_time=start_time,
            after=after,
            limit=limit,
            end_time=end_time,
            include_external_ids=include_external_ids,
            is_resolved=is_resolved,
            request_options=request_options,
        )

    async def get(
        self,
        id: str,
        *,
        include_external_ids: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DvirDefectGetDefectResponseBody:
        """
        Get a single DVIR defect by ID.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Defects** under the Maintenance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unique ID of the DVIR defect.

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DvirDefectGetDefectResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.defects.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            id, include_external_ids=include_external_ids, request_options=request_options
        )
        return _response.data

    async def history(
        self,
        *,
        start_time: str,
        end_time: str,
        limit: typing.Optional[int] = None,
        after: typing.Optional[str] = None,
        is_resolved: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DefectsResponse:
        """
        **Note: This is a legacy endpoint, consider using [this endpoint](https://developers.samsara.com/reference/streamdefects) instead. The endpoint will continue to function as documented.**

        Returns a list of DVIR defects in an organization, filtered by creation time. The maximum time period you can query for is 30 days.

         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        To use this endpoint, select **Read Defects** under the Maintenance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>

        Parameters
        ----------
        start_time : str
            A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*

        end_time : str
            An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*

        limit : typing.Optional[int]
            The limit for how many objects will be in the response. Default and max for this value is 512 objects.

        after : typing.Optional[str]
            If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        is_resolved : typing.Optional[bool]
            A filter on the data based on resolution status. Example: `isResolved=true`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DefectsResponse
            List of all DVIR defects in the organization

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.defects.history(
                start_time="startTime",
                end_time="endTime",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.history(
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            after=after,
            is_resolved=is_resolved,
            request_options=request_options,
        )
        return _response.data

    async def update(
        self,
        id: str,
        *,
        is_resolved: typing.Optional[bool] = OMIT,
        mechanic_notes: typing.Optional[str] = OMIT,
        resolved_at_time: typing.Optional[str] = OMIT,
        resolved_by: typing.Optional[ResolvedBy] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DefectResponse:
        """
        Updates a given defect. Can be used to resolve a defect by marking its `isResolved` field to `true`.

         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        To use this endpoint, select **Write Defects** under the Maintenance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>

        Parameters
        ----------
        id : str
            ID of the defect.

        is_resolved : typing.Optional[bool]
            Resolves the defect. Must be `true`.

        mechanic_notes : typing.Optional[str]
            The mechanics notes on the defect.

        resolved_at_time : typing.Optional[str]
            Time when defect was resolved. Defaults to now if not provided. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.

        resolved_by : typing.Optional[ResolvedBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DefectResponse
            Return the modified defect entity

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.defects.update(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id,
            is_resolved=is_resolved,
            mechanic_notes=mechanic_notes,
            resolved_at_time=resolved_at_time,
            resolved_by=resolved_by,
            request_options=request_options,
        )
        return _response.data
