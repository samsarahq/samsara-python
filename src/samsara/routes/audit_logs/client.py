# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.routes_get_routes_feed_response_body import RoutesGetRoutesFeedResponseBody
from .raw_client import AsyncRawAuditLogsClient, RawAuditLogsClient


class AuditLogsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuditLogsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuditLogsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuditLogsClient
        """
        return self._raw_client

    def feed(
        self,
        *,
        after: typing.Optional[str] = None,
        expand: typing.Optional[typing.Literal["route"]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RoutesGetRoutesFeedResponseBody:
        """
        Subscribes to a feed of immutable, append-only updates for routes. The initial request to this feed endpoint returns a cursor, which can be used on the next request to fetch updated routes that have had state changes since that request.

        The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllRouteJobUpdates).

         <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        expand : typing.Optional[typing.Literal["route"]]
            Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.

            Valid value: `route`  Valid values: `route`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RoutesGetRoutesFeedResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.routes.audit_logs.feed()
        """
        _response = self._raw_client.feed(after=after, expand=expand, request_options=request_options)
        return _response.data


class AsyncAuditLogsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuditLogsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuditLogsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuditLogsClient
        """
        return self._raw_client

    async def feed(
        self,
        *,
        after: typing.Optional[str] = None,
        expand: typing.Optional[typing.Literal["route"]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RoutesGetRoutesFeedResponseBody:
        """
        Subscribes to a feed of immutable, append-only updates for routes. The initial request to this feed endpoint returns a cursor, which can be used on the next request to fetch updated routes that have had state changes since that request.

        The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllRouteJobUpdates).

         <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Routes** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        expand : typing.Optional[typing.Literal["route"]]
            Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.

            Valid value: `route`  Valid values: `route`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RoutesGetRoutesFeedResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.routes.audit_logs.feed()


        asyncio.run(main())
        """
        _response = await self._raw_client.feed(after=after, expand=expand, request_options=request_options)
        return _response.data
