# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.location_and_speed_get_location_and_speed_response_body import (
    LocationAndSpeedGetLocationAndSpeedResponseBody,
)
from .raw_client import AsyncRawLocationAndSpeedClient, RawLocationAndSpeedClient


class LocationAndSpeedClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawLocationAndSpeedClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawLocationAndSpeedClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawLocationAndSpeedClient
        """
        return self._raw_client

    def get_location_and_speed(
        self,
        *,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        start_time: typing.Optional[str] = None,
        end_time: typing.Optional[str] = None,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        include_speed: typing.Optional[bool] = None,
        include_reverse_geo: typing.Optional[bool] = None,
        include_geofence_lookup: typing.Optional[bool] = None,
        include_external_ids: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LocationAndSpeedGetLocationAndSpeedResponseBody:
        """
        This endpoint will return asset locations and speed data that has been collected for your organization based on the time parameters passed in. Results are paginated. If you include an endTime, the endpoint will return data up until that point. If you don’t include an endTime, you can continue to poll the API real-time with the pagination cursor that gets returned on every call. The endpoint will only return data up until the endTime that has been processed by the server at the time of the original request. You will need to request the same [startTime, endTime) range again to receive data for assets processed after the original request time. This endpoint sorts the time-series data by device.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Vehicles** under the Vehicles category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            The limit for how many objects will be in the response. Default and max for this value is 512 objects.

        start_time : typing.Optional[str]
             A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        end_time : typing.Optional[str]
             An end time in RFC 3339 format. Defaults to never if not provided; if not provided then pagination will not cease, and a valid pagination cursor will always be returned. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Comma-separated list of asset IDs.

        include_speed : typing.Optional[bool]
            Optional boolean indicating whether or not to return the 'speed' object

        include_reverse_geo : typing.Optional[bool]
            Optional boolean indicating whether or not to return the 'address' object

        include_geofence_lookup : typing.Optional[bool]
            Optional boolean indicating whether or not to return the 'geofence' object

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LocationAndSpeedGetLocationAndSpeedResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.location_and_speed.get_location_and_speed(
            after="after",
            limit=1,
            start_time="startTime",
            end_time="endTime",
            include_speed=True,
            include_reverse_geo=True,
            include_geofence_lookup=True,
            include_external_ids=True,
        )
        """
        _response = self._raw_client.get_location_and_speed(
            after=after,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            ids=ids,
            include_speed=include_speed,
            include_reverse_geo=include_reverse_geo,
            include_geofence_lookup=include_geofence_lookup,
            include_external_ids=include_external_ids,
            request_options=request_options,
        )
        return _response.data


class AsyncLocationAndSpeedClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawLocationAndSpeedClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawLocationAndSpeedClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawLocationAndSpeedClient
        """
        return self._raw_client

    async def get_location_and_speed(
        self,
        *,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        start_time: typing.Optional[str] = None,
        end_time: typing.Optional[str] = None,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        include_speed: typing.Optional[bool] = None,
        include_reverse_geo: typing.Optional[bool] = None,
        include_geofence_lookup: typing.Optional[bool] = None,
        include_external_ids: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LocationAndSpeedGetLocationAndSpeedResponseBody:
        """
        This endpoint will return asset locations and speed data that has been collected for your organization based on the time parameters passed in. Results are paginated. If you include an endTime, the endpoint will return data up until that point. If you don’t include an endTime, you can continue to poll the API real-time with the pagination cursor that gets returned on every call. The endpoint will only return data up until the endTime that has been processed by the server at the time of the original request. You will need to request the same [startTime, endTime) range again to receive data for assets processed after the original request time. This endpoint sorts the time-series data by device.

         <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Vehicles** under the Vehicles category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        limit : typing.Optional[int]
            The limit for how many objects will be in the response. Default and max for this value is 512 objects.

        start_time : typing.Optional[str]
             A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        end_time : typing.Optional[str]
             An end time in RFC 3339 format. Defaults to never if not provided; if not provided then pagination will not cease, and a valid pagination cursor will always be returned. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Comma-separated list of asset IDs.

        include_speed : typing.Optional[bool]
            Optional boolean indicating whether or not to return the 'speed' object

        include_reverse_geo : typing.Optional[bool]
            Optional boolean indicating whether or not to return the 'address' object

        include_geofence_lookup : typing.Optional[bool]
            Optional boolean indicating whether or not to return the 'geofence' object

        include_external_ids : typing.Optional[bool]
            Optional boolean indicating whether to return external IDs on supported entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LocationAndSpeedGetLocationAndSpeedResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.location_and_speed.get_location_and_speed(
                after="after",
                limit=1,
                start_time="startTime",
                end_time="endTime",
                include_speed=True,
                include_reverse_geo=True,
                include_geofence_lookup=True,
                include_external_ids=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_location_and_speed(
            after=after,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            ids=ids,
            include_speed=include_speed,
            include_reverse_geo=include_reverse_geo,
            include_geofence_lookup=include_geofence_lookup,
            include_external_ids=include_external_ids,
            request_options=request_options,
        )
        return _response.data
