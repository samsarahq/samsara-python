# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....types.media_retrieval_get_media_retrieval_response_body import MediaRetrievalGetMediaRetrievalResponseBody
from ....types.media_retrieval_post_media_retrieval_response_body import MediaRetrievalPostMediaRetrievalResponseBody
from .raw_client import AsyncRawRetrievalClient, RawRetrievalClient
from .types.media_retrieval_post_media_retrieval_request_body_inputs_item import (
    MediaRetrievalPostMediaRetrievalRequestBodyInputsItem,
)
from .types.media_retrieval_post_media_retrieval_request_body_media_type import (
    MediaRetrievalPostMediaRetrievalRequestBodyMediaType,
)

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RetrievalClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawRetrievalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawRetrievalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawRetrievalClient
        """
        return self._raw_client

    def get(
        self, *, retrieval_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> MediaRetrievalGetMediaRetrievalResponseBody:
        """
        This endpoint returns media information corresponding to a retrieval ID. Retrieval IDs are associated to prior [media retrieval requests](https://developers.samsara.com/reference/postmediaretrieval). Urls provided by this endpoint expire in 8 hours.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Media Retrieval** under the Safety & Cameras category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        retrieval_id : str
            Retrieval ID associated with this media capture request. Examples: 2308cec4-82e0-46f1-8b3c-a3592e5cc21e

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaRetrievalGetMediaRetrievalResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.cameras.media.retrieval.get(
            retrieval_id="retrievalId",
        )
        """
        _response = self._raw_client.get(retrieval_id=retrieval_id, request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        end_time: str,
        inputs: typing.Sequence[MediaRetrievalPostMediaRetrievalRequestBodyInputsItem],
        media_type: MediaRetrievalPostMediaRetrievalRequestBodyMediaType,
        start_time: str,
        vehicle_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaRetrievalPostMediaRetrievalResponseBody:
        """
        This endpoint creates an asynchronous request to upload certain media from a device. The closest available media to the requested timestamp is returned. Images and high-res videos are supported; other types of media (e.g. hyperlapse, low-res) are planned to be supported in the future. Currently, only unblurred media is supported. If a device is offline, the requested media will be uploaded once it comes back online. Quota limits are enforced for media retrievals made through the API. The Create a media retrieval request response includes information about the media retrieval quota remaining for the organization. The media retrieval quota for the organization is reset at the beginning of each month.The quota is expressed using seconds of High Resolution video. 10 still images are equivalent to a 1 second of High Resolution footage.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Media Retrieval** under the Safety & Cameras category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        end_time : str
            An end time in RFC 3339 format. If endTime is the same as startTime, an image will be captured at startTime. Must be 1 second or more after startTime and no more than 60 seconds after startTime (Examples: 2019-06-13T19:08:55Z, 2019-06-13T19:08:55.455Z, OR 2015-09-15T14:00:42-04:00).

        inputs : typing.Sequence[MediaRetrievalPostMediaRetrievalRequestBodyInputsItem]
            A list of desired camera inputs for which to capture media. Only media with valid inputs (e.g. device has that input stream and device was recording at the time) will be uploaded. An empty list is invalid.

        media_type : MediaRetrievalPostMediaRetrievalRequestBodyMediaType
            The desired media type. If a video is requested, endTime must be after startTime. If an image is requested, endTime must be the same as startTime. Must be one of: image, videoHighRes. Examples: image, videoHighRes.  Valid values: `image`, `videoHighRes`

        start_time : str
            A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        vehicle_id : str
            Vehicle ID for which to initiate media capture. Examples: 1234

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaRetrievalPostMediaRetrievalResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.cameras.media.retrieval.create(
            end_time="2019-06-13T19:08:55Z",
            inputs=["dashcamRoadFacing", "dashcamRoadFacing"],
            media_type="image",
            start_time="2019-06-13T19:08:25Z",
            vehicle_id="1234",
        )
        """
        _response = self._raw_client.create(
            end_time=end_time,
            inputs=inputs,
            media_type=media_type,
            start_time=start_time,
            vehicle_id=vehicle_id,
            request_options=request_options,
        )
        return _response.data


class AsyncRetrievalClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawRetrievalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawRetrievalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawRetrievalClient
        """
        return self._raw_client

    async def get(
        self, *, retrieval_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> MediaRetrievalGetMediaRetrievalResponseBody:
        """
        This endpoint returns media information corresponding to a retrieval ID. Retrieval IDs are associated to prior [media retrieval requests](https://developers.samsara.com/reference/postmediaretrieval). Urls provided by this endpoint expire in 8 hours.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Media Retrieval** under the Safety & Cameras category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        retrieval_id : str
            Retrieval ID associated with this media capture request. Examples: 2308cec4-82e0-46f1-8b3c-a3592e5cc21e

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaRetrievalGetMediaRetrievalResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.cameras.media.retrieval.get(
                retrieval_id="retrievalId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(retrieval_id=retrieval_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        end_time: str,
        inputs: typing.Sequence[MediaRetrievalPostMediaRetrievalRequestBodyInputsItem],
        media_type: MediaRetrievalPostMediaRetrievalRequestBodyMediaType,
        start_time: str,
        vehicle_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaRetrievalPostMediaRetrievalResponseBody:
        """
        This endpoint creates an asynchronous request to upload certain media from a device. The closest available media to the requested timestamp is returned. Images and high-res videos are supported; other types of media (e.g. hyperlapse, low-res) are planned to be supported in the future. Currently, only unblurred media is supported. If a device is offline, the requested media will be uploaded once it comes back online. Quota limits are enforced for media retrievals made through the API. The Create a media retrieval request response includes information about the media retrieval quota remaining for the organization. The media retrieval quota for the organization is reset at the beginning of each month.The quota is expressed using seconds of High Resolution video. 10 still images are equivalent to a 1 second of High Resolution footage.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Media Retrieval** under the Safety & Cameras category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        end_time : str
            An end time in RFC 3339 format. If endTime is the same as startTime, an image will be captured at startTime. Must be 1 second or more after startTime and no more than 60 seconds after startTime (Examples: 2019-06-13T19:08:55Z, 2019-06-13T19:08:55.455Z, OR 2015-09-15T14:00:42-04:00).

        inputs : typing.Sequence[MediaRetrievalPostMediaRetrievalRequestBodyInputsItem]
            A list of desired camera inputs for which to capture media. Only media with valid inputs (e.g. device has that input stream and device was recording at the time) will be uploaded. An empty list is invalid.

        media_type : MediaRetrievalPostMediaRetrievalRequestBodyMediaType
            The desired media type. If a video is requested, endTime must be after startTime. If an image is requested, endTime must be the same as startTime. Must be one of: image, videoHighRes. Examples: image, videoHighRes.  Valid values: `image`, `videoHighRes`

        start_time : str
            A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        vehicle_id : str
            Vehicle ID for which to initiate media capture. Examples: 1234

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaRetrievalPostMediaRetrievalResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.cameras.media.retrieval.create(
                end_time="2019-06-13T19:08:55Z",
                inputs=["dashcamRoadFacing", "dashcamRoadFacing"],
                media_type="image",
                start_time="2019-06-13T19:08:25Z",
                vehicle_id="1234",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            end_time=end_time,
            inputs=inputs,
            media_type=media_type,
            start_time=start_time,
            vehicle_id=vehicle_id,
            request_options=request_options,
        )
        return _response.data
