# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.media_retrieval_list_uploaded_media_response_body import MediaRetrievalListUploadedMediaResponseBody
from .raw_client import AsyncRawMediaClient, RawMediaClient
from .retrieval.client import AsyncRetrievalClient, RetrievalClient
from .types.media_list_request_inputs_item import MediaListRequestInputsItem
from .types.media_list_request_media_types_item import MediaListRequestMediaTypesItem
from .types.media_list_request_trigger_reasons_item import MediaListRequestTriggerReasonsItem


class MediaClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMediaClient(client_wrapper=client_wrapper)
        self.retrieval = RetrievalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMediaClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMediaClient
        """
        return self._raw_client

    def list(
        self,
        *,
        vehicle_ids: str,
        start_time: str,
        end_time: str,
        inputs: typing.Optional[
            typing.Union[MediaListRequestInputsItem, typing.Sequence[MediaListRequestInputsItem]]
        ] = None,
        media_types: typing.Optional[
            typing.Union[MediaListRequestMediaTypesItem, typing.Sequence[MediaListRequestMediaTypesItem]]
        ] = None,
        trigger_reasons: typing.Optional[
            typing.Union[MediaListRequestTriggerReasonsItem, typing.Sequence[MediaListRequestTriggerReasonsItem]]
        ] = None,
        available_after_time: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaRetrievalListUploadedMediaResponseBody:
        """
        This endpoint returns a list of all uploaded media (video and still images) matching query parameters, with a maximum query range of one day. Additional media can be retrieved with the [Create a media retrieval request](https://developers.samsara.com/reference/postmediaretrieval) endpoint, and they will be included in the list after they are uploaded. Urls provided by this endpoint expire in 8 hours.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Media Retrieval** under the Safety & Cameras category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        vehicle_ids : str
            A filter on the data based on this comma-separated list of vehicle IDs and externalIds. You can specify up to 20 vehicles. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`

        start_time : str
            A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        end_time : str
            An end time in RFC 3339 format. End time cannot be more than 24 hours after startTime. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        inputs : typing.Optional[typing.Union[MediaListRequestInputsItem, typing.Sequence[MediaListRequestInputsItem]]]
            An optional list of desired camera inputs for which to return captured media. If empty, media for all available inputs will be returned.

        media_types : typing.Optional[typing.Union[MediaListRequestMediaTypesItem, typing.Sequence[MediaListRequestMediaTypesItem]]]
            An optional list of desired media types for which to return captured media. If empty, media for all available media types will be returned. Possible options include: image, videoHighRes.

        trigger_reasons : typing.Optional[typing.Union[MediaListRequestTriggerReasonsItem, typing.Sequence[MediaListRequestTriggerReasonsItem]]]
            An optional list of desired trigger reasons for which to return captured media. If empty, media for all available trigger reasons will be returned. Possible options include: api, panicButton, periodicStill, rfidEvent, safetyEvent, tripEndStill, tripStartStill, videoRetrieval. videoRetrieval represents media captured for a dashboard video retrieval request.

        available_after_time : typing.Optional[str]
            An optional timestamp in RFC 3339 format that can act as a cursor to track which media has previously been retrieved; only media whose availableAtTime comes after this parameter will be returned. Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaRetrievalListUploadedMediaResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.cameras.media.list(
            vehicle_ids="vehicleIds",
            start_time="startTime",
            end_time="endTime",
        )
        """
        _response = self._raw_client.list(
            vehicle_ids=vehicle_ids,
            start_time=start_time,
            end_time=end_time,
            inputs=inputs,
            media_types=media_types,
            trigger_reasons=trigger_reasons,
            available_after_time=available_after_time,
            after=after,
            request_options=request_options,
        )
        return _response.data


class AsyncMediaClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMediaClient(client_wrapper=client_wrapper)
        self.retrieval = AsyncRetrievalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMediaClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMediaClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        vehicle_ids: str,
        start_time: str,
        end_time: str,
        inputs: typing.Optional[
            typing.Union[MediaListRequestInputsItem, typing.Sequence[MediaListRequestInputsItem]]
        ] = None,
        media_types: typing.Optional[
            typing.Union[MediaListRequestMediaTypesItem, typing.Sequence[MediaListRequestMediaTypesItem]]
        ] = None,
        trigger_reasons: typing.Optional[
            typing.Union[MediaListRequestTriggerReasonsItem, typing.Sequence[MediaListRequestTriggerReasonsItem]]
        ] = None,
        available_after_time: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaRetrievalListUploadedMediaResponseBody:
        """
        This endpoint returns a list of all uploaded media (video and still images) matching query parameters, with a maximum query range of one day. Additional media can be retrieved with the [Create a media retrieval request](https://developers.samsara.com/reference/postmediaretrieval) endpoint, and they will be included in the list after they are uploaded. Urls provided by this endpoint expire in 8 hours.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Read Media Retrieval** under the Safety & Cameras category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        vehicle_ids : str
            A filter on the data based on this comma-separated list of vehicle IDs and externalIds. You can specify up to 20 vehicles. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`

        start_time : str
            A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        end_time : str
            An end time in RFC 3339 format. End time cannot be more than 24 hours after startTime. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).

        inputs : typing.Optional[typing.Union[MediaListRequestInputsItem, typing.Sequence[MediaListRequestInputsItem]]]
            An optional list of desired camera inputs for which to return captured media. If empty, media for all available inputs will be returned.

        media_types : typing.Optional[typing.Union[MediaListRequestMediaTypesItem, typing.Sequence[MediaListRequestMediaTypesItem]]]
            An optional list of desired media types for which to return captured media. If empty, media for all available media types will be returned. Possible options include: image, videoHighRes.

        trigger_reasons : typing.Optional[typing.Union[MediaListRequestTriggerReasonsItem, typing.Sequence[MediaListRequestTriggerReasonsItem]]]
            An optional list of desired trigger reasons for which to return captured media. If empty, media for all available trigger reasons will be returned. Possible options include: api, panicButton, periodicStill, rfidEvent, safetyEvent, tripEndStill, tripStartStill, videoRetrieval. videoRetrieval represents media captured for a dashboard video retrieval request.

        available_after_time : typing.Optional[str]
            An optional timestamp in RFC 3339 format that can act as a cursor to track which media has previously been retrieved; only media whose availableAtTime comes after this parameter will be returned. Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00

        after : typing.Optional[str]
             If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaRetrievalListUploadedMediaResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.cameras.media.list(
                vehicle_ids="vehicleIds",
                start_time="startTime",
                end_time="endTime",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            vehicle_ids=vehicle_ids,
            start_time=start_time,
            end_time=end_time,
            inputs=inputs,
            media_types=media_types,
            trigger_reasons=trigger_reasons,
            available_after_time=available_after_time,
            after=after,
            request_options=request_options,
        )
        return _response.data
