# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawTokensClient, RawTokensClient
from .types.create_tokens_response import CreateTokensResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTokensClient
        """
        return self._raw_client

    def create(
        self, *, code: typing.Optional[str] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateTokensResponse:
        """
        Exchange an authorization code for access and refresh tokens.

        Parameters
        ----------
        code : typing.Optional[str]
            The client secret of the application

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTokensResponse
            Successful response

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.auth.tokens.create()
        """
        _response = self._raw_client.create(code=code, request_options=request_options)
        return _response.data

    def revoke(self, *, token: str, request_options: typing.Optional[RequestOptions] = None) -> CreateTokensResponse:
        """
        Invalidates access tokens and refresh tokens for that organization

        Parameters
        ----------
        token : str
            The token to revoke

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTokensResponse
            Successful response

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.auth.tokens.revoke(
            token="token",
        )
        """
        _response = self._raw_client.revoke(token=token, request_options=request_options)
        return _response.data


class AsyncTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTokensClient
        """
        return self._raw_client

    async def create(
        self, *, code: typing.Optional[str] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateTokensResponse:
        """
        Exchange an authorization code for access and refresh tokens.

        Parameters
        ----------
        code : typing.Optional[str]
            The client secret of the application

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTokensResponse
            Successful response

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.auth.tokens.create()


        asyncio.run(main())
        """
        _response = await self._raw_client.create(code=code, request_options=request_options)
        return _response.data

    async def revoke(
        self, *, token: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateTokensResponse:
        """
        Invalidates access tokens and refresh tokens for that organization

        Parameters
        ----------
        token : str
            The token to revoke

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTokensResponse
            Successful response

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.auth.tokens.revoke(
                token="token",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.revoke(token=token, request_options=request_options)
        return _response.data
