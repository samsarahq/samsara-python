# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class AssetResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'custom_metadata': 'dict(str, str)',
        'data_outputs': 'list[AssetDataOutput]',
        'id': 'str',
        'is_running': 'bool',
        'location': 'AssetLocation',
        'location_data_input': 'AssetResponseLocationDataInput',
        'location_type': 'LocationType',
        'name': 'str',
        'parent_asset': 'AssetResponseParentAsset',
        'running_status_data_input': 'AssetResponseRunningStatusDataInput',
        'tags': 'list[TagTinyResponse]'
    }

    attribute_map = {
        'custom_metadata': 'customMetadata',
        'data_outputs': 'dataOutputs',
        'id': 'id',
        'is_running': 'isRunning',
        'location': 'location',
        'location_data_input': 'locationDataInput',
        'location_type': 'locationType',
        'name': 'name',
        'parent_asset': 'parentAsset',
        'running_status_data_input': 'runningStatusDataInput',
        'tags': 'tags'
    }

    def __init__(self, custom_metadata=None, data_outputs=None, id=None, is_running=None, location=None, location_data_input=None, location_type=None, name=None, parent_asset=None, running_status_data_input=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """AssetResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._custom_metadata = None
        self._data_outputs = None
        self._id = None
        self._is_running = None
        self._location = None
        self._location_data_input = None
        self._location_type = None
        self._name = None
        self._parent_asset = None
        self._running_status_data_input = None
        self._tags = None
        self.discriminator = None

        if custom_metadata is not None:
            self.custom_metadata = custom_metadata
        if data_outputs is not None:
            self.data_outputs = data_outputs
        self.id = id
        self.is_running = is_running
        if location is not None:
            self.location = location
        if location_data_input is not None:
            self.location_data_input = location_data_input
        if location_type is not None:
            self.location_type = location_type
        self.name = name
        if parent_asset is not None:
            self.parent_asset = parent_asset
        if running_status_data_input is not None:
            self.running_status_data_input = running_status_data_input
        if tags is not None:
            self.tags = tags

    @property
    def custom_metadata(self):
        """Gets the custom_metadata of this AssetResponse.  # noqa: E501

        The custom fields of an asset.  # noqa: E501

        :return: The custom_metadata of this AssetResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_metadata

    @custom_metadata.setter
    def custom_metadata(self, custom_metadata):
        """Sets the custom_metadata of this AssetResponse.

        The custom fields of an asset.  # noqa: E501

        :param custom_metadata: The custom_metadata of this AssetResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_metadata = custom_metadata

    @property
    def data_outputs(self):
        """Gets the data_outputs of this AssetResponse.  # noqa: E501

        The list of data outputs configured on the asset.  # noqa: E501

        :return: The data_outputs of this AssetResponse.  # noqa: E501
        :rtype: list[AssetDataOutput]
        """
        return self._data_outputs

    @data_outputs.setter
    def data_outputs(self, data_outputs):
        """Sets the data_outputs of this AssetResponse.

        The list of data outputs configured on the asset.  # noqa: E501

        :param data_outputs: The data_outputs of this AssetResponse.  # noqa: E501
        :type: list[AssetDataOutput]
        """

        self._data_outputs = data_outputs

    @property
    def id(self):
        """Gets the id of this AssetResponse.  # noqa: E501

        The id of the asset  # noqa: E501

        :return: The id of this AssetResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetResponse.

        The id of the asset  # noqa: E501

        :param id: The id of this AssetResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_running(self):
        """Gets the is_running of this AssetResponse.  # noqa: E501

        The running status of the asset. Returns True for On, and False for Off.  # noqa: E501

        :return: The is_running of this AssetResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_running

    @is_running.setter
    def is_running(self, is_running):
        """Sets the is_running of this AssetResponse.

        The running status of the asset. Returns True for On, and False for Off.  # noqa: E501

        :param is_running: The is_running of this AssetResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_running is None:  # noqa: E501
            raise ValueError("Invalid value for `is_running`, must not be `None`")  # noqa: E501

        self._is_running = is_running

    @property
    def location(self):
        """Gets the location of this AssetResponse.  # noqa: E501


        :return: The location of this AssetResponse.  # noqa: E501
        :rtype: AssetLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AssetResponse.


        :param location: The location of this AssetResponse.  # noqa: E501
        :type: AssetLocation
        """

        self._location = location

    @property
    def location_data_input(self):
        """Gets the location_data_input of this AssetResponse.  # noqa: E501


        :return: The location_data_input of this AssetResponse.  # noqa: E501
        :rtype: AssetResponseLocationDataInput
        """
        return self._location_data_input

    @location_data_input.setter
    def location_data_input(self, location_data_input):
        """Sets the location_data_input of this AssetResponse.


        :param location_data_input: The location_data_input of this AssetResponse.  # noqa: E501
        :type: AssetResponseLocationDataInput
        """

        self._location_data_input = location_data_input

    @property
    def location_type(self):
        """Gets the location_type of this AssetResponse.  # noqa: E501


        :return: The location_type of this AssetResponse.  # noqa: E501
        :rtype: LocationType
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this AssetResponse.


        :param location_type: The location_type of this AssetResponse.  # noqa: E501
        :type: LocationType
        """

        self._location_type = location_type

    @property
    def name(self):
        """Gets the name of this AssetResponse.  # noqa: E501

        The name of the asset.  # noqa: E501

        :return: The name of this AssetResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetResponse.

        The name of the asset.  # noqa: E501

        :param name: The name of this AssetResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent_asset(self):
        """Gets the parent_asset of this AssetResponse.  # noqa: E501


        :return: The parent_asset of this AssetResponse.  # noqa: E501
        :rtype: AssetResponseParentAsset
        """
        return self._parent_asset

    @parent_asset.setter
    def parent_asset(self, parent_asset):
        """Sets the parent_asset of this AssetResponse.


        :param parent_asset: The parent_asset of this AssetResponse.  # noqa: E501
        :type: AssetResponseParentAsset
        """

        self._parent_asset = parent_asset

    @property
    def running_status_data_input(self):
        """Gets the running_status_data_input of this AssetResponse.  # noqa: E501


        :return: The running_status_data_input of this AssetResponse.  # noqa: E501
        :rtype: AssetResponseRunningStatusDataInput
        """
        return self._running_status_data_input

    @running_status_data_input.setter
    def running_status_data_input(self, running_status_data_input):
        """Sets the running_status_data_input of this AssetResponse.


        :param running_status_data_input: The running_status_data_input of this AssetResponse.  # noqa: E501
        :type: AssetResponseRunningStatusDataInput
        """

        self._running_status_data_input = running_status_data_input

    @property
    def tags(self):
        """Gets the tags of this AssetResponse.  # noqa: E501

        The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting) associated with the Industrial Asset. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.  # noqa: E501

        :return: The tags of this AssetResponse.  # noqa: E501
        :rtype: list[TagTinyResponse]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssetResponse.

        The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting) associated with the Industrial Asset. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.  # noqa: E501

        :param tags: The tags of this AssetResponse.  # noqa: E501
        :type: list[TagTinyResponse]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetResponse):
            return True

        return self.to_dict() != other.to_dict()
